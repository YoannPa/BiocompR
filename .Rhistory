groups = stemcells$celltype,
colors = c("blue","red","green"))
eva.res$EV.plots$`1 & 2`
eva.res$EV.plots$`1 & 3`
eva.res$EV.plots$`1 & 4`
eva.res$EV.plots$`1 & 5`
eva.res$EV.plots$`1 & 6`
eva.res$EV.plots$`1 & 3`
eva.res$EV.plots$`2 & 3`
stemcells$celltype
stemcells$study
intersect(x = stemcells$study, y = stemcells$celltype)
intersect(x = as.character(stemcells$study), y = stemcells$celltype)
as.character(stemcells$study)
intersect(x = as.character(stemcells$study), y = as.character(stemcells$celltype))
?intersect
union(x =  as.character(stemcells$study), y = as.character(stemcells$celltype))
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
union(x, y)
intersect(x, y)
setdiff(x, y)
eva.res<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm",var.min = 10^-3,
groups = stemcells$celltype,
colors = c("blue","red","green"))
eva.res$EV.plots$`1 & 2`
eva.res$EV.plots$`1 & 3`
eva.res$EV.plots$`2 & 3`
eva.res$EV.plots$`3 & 4`
eva.res<-EVA(data = df.stemc, use = "pairwise", method = "kendall",
adjust = "holm",var.min = 10^-3,
groups = stemcells$celltype,
colors = c("blue","red","green"))
eva.res$EV.plots$`1 & 2`
eva.res$EV.plots$`2 & 3`
eva.res$EV.plots$`2 & 4`
eva.res$EV.plots$`2 & 3`
eva.res$EV.plots$`3 & 4`
eva.res<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm",var.min = 10^-3,
groups = stemcells$celltype,
colors = c("blue","red","green"))
eva.res$EV.plots$`2 & 3`
eva.res<-EVA(data = df.stemc, use = "pairwise", method = "pearson",
adjust = "holm",var.min = 10^-3,
groups = stemcells$celltype,
colors = c("blue","red","green"))
eva.res$EV.plots$`2 & 3`
dim(df.stemc)
colnames(df.stemc)
stemcells$study
stemcells$celltype
summary(stemcells$celltype)
summary(stemcells$study)
dim(df.stemc)
data.frame(stemcells$study, stemcells$celltype)
data.frame(colnames(df.stemc), stemcells$study, stemcells$celltype)
df.stemc<-df.stemc[,c(1:3,21:23,33:35,39:41,42:44,45:47,60:62,66:68,72:74,111:113,114:116,120:122)]
studies<-stemcells$study[c(1:3,21:23,33:35,39:41,42:44,45:47,60:62,66:68,72:74,111:113,114:116,120:122)]
studies
cell.types<-stemcells$celltype[c(1:3,21:23,33:35,39:41,42:44,45:47,60:62,66:68,72:74,111:113,114:116,120:122)]
cell.types
summary(cell.types)
samples<-c(1:3,21:23,33:35,39:41,42:44,45:47,60:62,66:68,72:74,111:113,114:116,120:122)
dim(df.stemc)
?corr.test
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = studies,
colors = c("blue","red","green","orange"))
?EVA
eva.study$EV.plots$`1 & 2`
eva.study$EV.plots$`2 & 3`
eva.study$EV.plots$`3 & 4`
eva.study$EV.plots$`2 & 3`
eva.study$EV.plots$`1 & 2`
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "pearson",
adjust = "none", var.min = 10^-3, groups = studies,
colors = c("blue","red","green","orange"))
eva.study$EV.plots$`1 & 2`
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = studies,
colors = c("blue","red","green","orange"))
eva.study$EV.plots$`1 & 2`
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "none", var.min = 10^-3, groups = studies,
colors = c("blue","red","green","orange"))
eva.study$EV.plots$`1 & 2`
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "pearson",
adjust = "none", var.min = 10^-3, groups = studies,
colors = c("blue","red","green","orange"))
eva.study$EV.plots$`1 & 2`
data("stemcells")
summary(stemcells$study)
summary(stemcells$celltype)
df.stemc<-t(data.frame(stemcells$gene))
data.frame(colnames(df.stemc), stemcells$study, stemcells$celltype)
df.stemc<-t(data.frame(stemcells$gene))
samples<-c(18:20,21:23,33:35,39:41,42:44,45:47,60:62,66:68,90:92,111:113,114:116,120:122)
df.stemc<-df.stemc[,samples]
studies<-stemcells$study[samples]
cell.types<-stemcells$celltype[samples]
dim(df.stemc)
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = studies,
colors = c("blue","red","green","orange"))
eva.study$EV.plots$`1 & 2`
data("stemcells")
summary(stemcells$study)
summary(stemcells$celltype)
df.stemc<-t(data.frame(stemcells$gene))
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = stemcells$study,
colors = c("blue","red","green","orange"))
eva.study$EV.plots$`1 & 2`
ggeigenvector<- function(
data, xcol, ycol, eigenvalues, colors, label=TRUE, title){
ev.plot<-ggplot(data=data) +
ggtitle(title) +
geom_point(aes_string(x = xcol, y = ycol, color = "Groups")) +
geom_segment(aes_string(xend = xcol, yend = ycol, color = "Groups"),
x=0, y=0, size=1, arrow = arrow(length = unit(0.3,"cm"))) +
scale_color_manual(values=colors) +
xlab(var.accounted(colname=xcol, eigen.values=eigenvalues)) +
ylab(var.accounted(colname=ycol, eigen.values=eigenvalues)) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 13),
legend.text = element_text(size=12)) +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed")
if(label){
ev.plot <- ev.plot +
geom_label_repel(aes_string(x = xcol, y = ycol, label = "Labels"))
}
}
var.accounted<-function(colname, eigen.values){
vect.num<-gsub("[^0-9.]","",colname)
var.accounted<-round(
eigen.values[as.integer(vect.num)]/length(eigen.values)*100,2)
paste0("Eigenvector ",vect.num," (Variance accounted = " ,var.accounted, "%)")
}
EVA<-function(data, use = "pairwise", method = "pearson", adjust = "none",
var.min = 0.01, groups = as.character(seq(ncol(data))),
colors = rainbow(n = ncol(data))){
#Compute a correlation test on the data
M<-corr.test(x = data, use = use, method = method, adjust = adjust)$r
#Get eigenvalues from the correlation matrix
eigvals <- eigen(M)$values
#Get percentage of variance accounted by each eigen values
var.acc<-eigvals/length(eigvals)
#How many eigenvalues are above the minimum threshold for variance accounted
true.eigvals<-length(var.acc[var.acc >= var.min])
if(true.eigvals == 0){
stop("No eigenvalues accounting for more than the var.min minimum of the variance. Please set a lower var.min.")
}
#Get eigenvectors
eigvects <- as.data.frame(eigen(M)$vectors[,c(1:true.eigvals)])
dframe<-as.data.frame(
cbind(eigvects,"Groups" = as.factor(groups),"Labels" = colnames(data)))
#Create all possible combinations
combs<-expand.grid(seq(true.eigvals),seq(true.eigvals))
#Remove duplicate and order
combs<-combs[combs$Var1 != combs$Var2,]
combs<-combs[order(combs[,1]),]
my_cols<-colnames(dframe)[!colnames(dframe) %in% c("Groups","Labels")]
#Generate all Eigenvector Plots
list_EVplots<-lapply(my_cols, function(col1){
lapply(my_cols, function(col2){
if(col1 == col2){ return(NULL) } else {
ggeigenvector(data = dframe, eigenvalues = eigvals, xcol = col1,
ycol = col2, colors = colors,
title = paste("Eigenvector Plot - Pairwise",method,
"correlation with", adjust, "adjustment"))
}
})
})
#Flatten list
list_EVplots<-unlist(list_EVplots,recursive = F)
#Remove NULL elements
list_EVplots<-Filter(Negate(is.null), list_EVplots)
names(list_EVplots)<-paste(combs[,1],"&",combs[,2])
#Scaling the matrix values.
data<-scale(data[complete.cases(data),])
#Matricial product of scaled values and eigenvectors.
pca.scores<- data %*% eigen(M)$vectors
colnames(pca.scores)<-paste("EV",seq(ncol(data)), sep="")
#Get correlation between samples and Principal components.
PC.cor<-corr.test(data,pca.scores,use = use, method = method)$r
return(list("PC.cor" = PC.cor, "EV.plots" = list_EVplots,
"PC.scores" = as.data.frame(pca.scores)))
}
EVA<-function(data, use = "pairwise", method = "pearson", adjust = "none",
var.min = 0.01, groups = as.character(seq(ncol(data))),
colors = rainbow(n = ncol(data)), label=TRUE){
#Compute a correlation test on the data
M<-corr.test(x = data, use = use, method = method, adjust = adjust)$r
#Get eigenvalues from the correlation matrix
eigvals <- eigen(M)$values
#Get percentage of variance accounted by each eigen values
var.acc<-eigvals/length(eigvals)
#How many eigenvalues are above the minimum threshold for variance accounted
true.eigvals<-length(var.acc[var.acc >= var.min])
if(true.eigvals == 0){
stop("No eigenvalues accounting for more than the var.min minimum of the variance. Please set a lower var.min.")
}
#Get eigenvectors
eigvects <- as.data.frame(eigen(M)$vectors[,c(1:true.eigvals)])
dframe<-as.data.frame(
cbind(eigvects,"Groups" = as.factor(groups),"Labels" = colnames(data)))
#Create all possible combinations
combs<-expand.grid(seq(true.eigvals),seq(true.eigvals))
#Remove duplicate and order
combs<-combs[combs$Var1 != combs$Var2,]
combs<-combs[order(combs[,1]),]
my_cols<-colnames(dframe)[!colnames(dframe) %in% c("Groups","Labels")]
#Generate all Eigenvector Plots
list_EVplots<-lapply(my_cols, function(col1){
lapply(my_cols, function(col2){
if(col1 == col2){ return(NULL) } else {
ggeigenvector(data = dframe, eigenvalues = eigvals, xcol = col1,
ycol = col2, colors = colors, label = label,
title = paste("Eigenvector Plot - Pairwise",method,
"correlation with", adjust, "adjustment"))
}
})
})
#Flatten list
list_EVplots<-unlist(list_EVplots,recursive = F)
#Remove NULL elements
list_EVplots<-Filter(Negate(is.null), list_EVplots)
names(list_EVplots)<-paste(combs[,1],"&",combs[,2])
#Scaling the matrix values.
data<-scale(data[complete.cases(data),])
#Matricial product of scaled values and eigenvectors.
pca.scores<- data %*% eigen(M)$vectors
colnames(pca.scores)<-paste("EV",seq(ncol(data)), sep="")
#Get correlation between samples and Principal components.
PC.cor<-corr.test(data,pca.scores,use = use, method = method)$r
return(list("PC.cor" = PC.cor, "EV.plots" = list_EVplots,
"PC.scores" = as.data.frame(pca.scores)))
}
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = stemcells$study,
colors = c("blue","red","green","orange"), label = FALSE)
data = df.stemc
use = "pairwise"
method = "spearman"
adjust = "holm"
var.min = 10^-3
groups = stemcells$study
colors = c("blue","red","green","orange")
label = FALSE
M<-corr.test(x = data, use = use, method = method, adjust = adjust)$r
eigvals <- eigen(M)$values
#Get percentage of variance accounted by each eigen values
var.acc<-eigvals/length(eigvals)
#How many eigenvalues are above the minimum threshold for variance accounted
true.eigvals<-length(var.acc[var.acc >= var.min])
if(true.eigvals == 0){
stop("No eigenvalues accounting for more than the var.min minimum of the variance. Please set a lower var.min.")
}
#Get eigenvectors
eigvects <- as.data.frame(eigen(M)$vectors[,c(1:true.eigvals)])
dframe<-as.data.frame(
cbind(eigvects,"Groups" = as.factor(groups),"Labels" = colnames(data)))
#Create all possible combinations
combs<-expand.grid(seq(true.eigvals),seq(true.eigvals))
#Remove duplicate and order
combs<-combs[combs$Var1 != combs$Var2,]
combs<-combs[order(combs[,1]),]
my_cols<-colnames(dframe)[!colnames(dframe) %in% c("Groups","Labels")]
#Generate all Eigenvector Plots
list_EVplots<-lapply(my_cols, function(col1){
lapply(my_cols, function(col2){
if(col1 == col2){ return(NULL) } else {
ggeigenvector(data = dframe, eigenvalues = eigvals, xcol = col1,
ycol = col2, colors = colors, label = label,
title = paste("Eigenvector Plot - Pairwise",method,
"correlation with", adjust, "adjustment"))
}
})
})
#Flatten list
list_EVplots<-unlist(list_EVplots,recursive = F)
list_EVplots<-Filter(Negate(is.null), list_EVplots)
list_EVplots[[1]]
length(list_EVplots)
#Compute a correlation test on the data
M<-corr.test(x = data, use = use, method = method, adjust = adjust)$r
#Get eigenvalues from the correlation matrix
eigvals <- eigen(M)$values
#Get percentage of variance accounted by each eigen values
var.acc<-eigvals/length(eigvals)
#How many eigenvalues are above the minimum threshold for variance accounted
true.eigvals<-length(var.acc[var.acc >= var.min])
if(true.eigvals == 0){
stop("No eigenvalues accounting for more than the var.min minimum of the variance. Please set a lower var.min.")
}
#Get eigenvectors
eigvects <- as.data.frame(eigen(M)$vectors[,c(1:true.eigvals)])
dframe<-as.data.frame(
cbind(eigvects,"Groups" = as.factor(groups),"Labels" = colnames(data)))
#Create all possible combinations
combs<-expand.grid(seq(true.eigvals),seq(true.eigvals))
#Remove duplicate and order
combs<-combs[combs$Var1 != combs$Var2,]
combs<-combs[order(combs[,1]),]
my_cols<-colnames(dframe)[!colnames(dframe) %in% c("Groups","Labels")]
my_cols
ggeigenvector(data = dframe, eigenvalues = eigvals, xcol = "V1",
ycol = "V2", colors = colors, label = label,
title = paste("Eigenvector Plot - Pairwise",method,
"correlation with", adjust, "adjustment"))
data = dframe
eigenvalues = eigvals
xcol = "V1"
ycol = "V2"
colors = colors
title = paste("Eigenvector Plot - Pairwise",method,
+                             "correlation with", adjust, "adjustment")
title = paste("Eigenvector Plot - Pairwise",method,"correlation with", adjust, "adjustment")
title
ev.plot<-ggplot(data=data) +
ggtitle(title) +
geom_point(aes_string(x = xcol, y = ycol, color = "Groups")) +
geom_segment(aes_string(xend = xcol, yend = ycol, color = "Groups"),
x=0, y=0, size=1, arrow = arrow(length = unit(0.3,"cm"))) +
scale_color_manual(values=colors) +
xlab(var.accounted(colname=xcol, eigen.values=eigenvalues)) +
ylab(var.accounted(colname=ycol, eigen.values=eigenvalues)) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 13),
legend.text = element_text(size=12)) +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed")
if(label){
ev.plot <- ev.plot +
geom_label_repel(aes_string(x = xcol, y = ycol, label = "Labels"))
}
ev.plot
ggeigenvector<- function(
data, xcol, ycol, eigenvalues, colors, label=TRUE, title){
ev.plot<-ggplot(data=data) +
ggtitle(title) +
geom_point(aes_string(x = xcol, y = ycol, color = "Groups")) +
geom_segment(aes_string(xend = xcol, yend = ycol, color = "Groups"),
x=0, y=0, size=1, arrow = arrow(length = unit(0.3,"cm"))) +
scale_color_manual(values=colors) +
xlab(var.accounted(colname=xcol, eigen.values=eigenvalues)) +
ylab(var.accounted(colname=ycol, eigen.values=eigenvalues)) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 13),
legend.text = element_text(size=12)) +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed")
if(label){
ev.plot <- ev.plot +
geom_label_repel(aes_string(x = xcol, y = ycol, label = "Labels"))
}
ev.plot
}
EVA<-function(data, use = "pairwise", method = "pearson", adjust = "none",
var.min = 0.01, groups = as.character(seq(ncol(data))),
colors = rainbow(n = ncol(data)), label=TRUE){
#Compute a correlation test on the data
M<-corr.test(x = data, use = use, method = method, adjust = adjust)$r
#Get eigenvalues from the correlation matrix
eigvals <- eigen(M)$values
#Get percentage of variance accounted by each eigen values
var.acc<-eigvals/length(eigvals)
#How many eigenvalues are above the minimum threshold for variance accounted
true.eigvals<-length(var.acc[var.acc >= var.min])
if(true.eigvals == 0){
stop("No eigenvalues accounting for more than the var.min minimum of the variance. Please set a lower var.min.")
}
#Get eigenvectors
eigvects <- as.data.frame(eigen(M)$vectors[,c(1:true.eigvals)])
dframe<-as.data.frame(
cbind(eigvects,"Groups" = as.factor(groups),"Labels" = colnames(data)))
#Create all possible combinations
combs<-expand.grid(seq(true.eigvals),seq(true.eigvals))
#Remove duplicate and order
combs<-combs[combs$Var1 != combs$Var2,]
combs<-combs[order(combs[,1]),]
my_cols<-colnames(dframe)[!colnames(dframe) %in% c("Groups","Labels")]
#Generate all Eigenvector Plots
list_EVplots<-lapply(my_cols, function(col1){
lapply(my_cols, function(col2){
if(col1 == col2){ return(NULL) } else {
ggeigenvector(data = dframe, eigenvalues = eigvals, xcol = col1,
ycol = col2, colors = colors, label = label,
title = paste("Eigenvector Plot - Pairwise",method,
"correlation with", adjust, "adjustment"))
}
})
})
#Flatten list
list_EVplots<-unlist(list_EVplots,recursive = F)
#Remove NULL elements
list_EVplots<-Filter(Negate(is.null), list_EVplots)
names(list_EVplots)<-paste(combs[,1],"&",combs[,2])
#Scaling the matrix values.
data<-scale(data[complete.cases(data),])
#Matricial product of scaled values and eigenvectors.
pca.scores<- data %*% eigen(M)$vectors
colnames(pca.scores)<-paste("EV",seq(ncol(data)), sep="")
#Get correlation between samples and Principal components.
PC.cor<-corr.test(data,pca.scores,use = use, method = method)$r
return(list("PC.cor" = PC.cor, "EV.plots" = list_EVplots,
"PC.scores" = as.data.frame(pca.scores)))
}
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = stemcells$study,
colors = c("blue","red","green","orange"), label = FALSE)
eva.study$EV.plots$`1 & 2`
eva.study$EV.plots$`2 & 3`
eva.study$PC.cor
data.frame(colnames(df.stemc), stemcells$study, stemcells$celltype)
eva.study$PC.cor[,1:5]
data.frame(colnames(df.stemc), stemcells$study, stemcells$celltype)
data.frame(colnames(df.stemc), stemcells$study, stemcells$celltype)
eva.study$PC.cor[c(1,21,39,45,60,72,111,114),1:5]
head(eva.study$PC.scores[,1:5])
library(GGally)
ggfacet(eva.study$PC.scores[,c(1:5)]) + geom_density_2d()
res.abs<-apply(X = eva.study$PC.scores, MARGIN = 1:2,FUN = abs)
top10.gene.IDs<-rownames(eva.res$PC.scores[order(rowSums(res.abs, na.rm = TRUE),
decreasing = TRUE),][1:10,])
top10.gene.IDs
dim(res.abs)
head(res.abs[,1:10])
head(res.abs[,1:10], n=30)
res.abs<-apply(X = eva.res$PC.scores, MARGIN = 1:2,FUN = abs)
top10.gene.IDs<-rownames(eva.res$PC.scores[order(rowSums(res.abs[,1:5], na.rm = TRUE),
decreasing = TRUE),][1:10,])
top10.gene.IDs
top10.gene.IDs
top10.gene.IDs
eva.res<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm",var.min = 10^-3, groups = stemcells$celltype,
colors = c("blue","red","green"), label = FALSE)
eva.cells<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm",var.min = 10^-3, groups = stemcells$celltype,
colors = c("blue","red","green"), label = FALSE)
eva.cells$EV.plots$`1 & 2`
eva.cells$EV.plots$`2 & 3`
eva.cells$EV.plots$`1 & 3`
eva.cells$EV.plots$`1 & 4`
eva.cells$EV.plots$`1 & 5`
eva.cells$EV.plots$`1 & 6`
eva.cells$EV.plots$`1 & 7`
eva.cells$EV.plots$`1 & 8`
eva.cells$EV.plots$`1 & 9`
eva.cells$EV.plots$`1 & 10`
eva.cells$EV.plots$`1 & 11`
eva.cells$EV.plots$`1 & 12`
eva.cells$EV.plots$`1 & 13`
eva.cells$EV.plots$`1 & 14`
eva.cells$EV.plots$`1 & 15`
eva.cells$EV.plots$`1 & 16`
eva.cells$EV.plots$`1 & 17`
eva.cells$EV.plots$`1 & 18`
eva.cells$EV.plots$`1 & 19`
eva.cells$EV.plots$15
eva.cells$EV.plots$`1 & 15`
eva.cells$EV.plots$`1 & 16`
eva.cells$EV.plots$`1 & 17`
eva.cells$EV.plots$`1 & 14`
eva.cells$EV.plots$`1 & 13`
eva.cells$EV.plots$`1 & 12`
eva.cells$EV.plots$`1 & 11`
eva.cells$EV.plots$`1 & 10`
eva.cells$EV.plots$`1 & 9`
eva.cells$EV.plots$`1 & 8`
eva.cells$EV.plots$`1 & 7`
eva.cells$EV.plots$`1 & 6`
eva.cells$EV.plots$`1 & 5`
eva.cells$EV.plots$`1 & 6`
eva.cells$EV.plots$`1 & 4`
eva.cells$EV.plots$`1 & 7`
top10.hiPSgene.IDs<-rownames(eva.res$PC.scores[order(res.abs[,7], decreasing = TRUE),][1:10,])
top10.hiPSgene.IDs
devtools::document()
devtools::install()
library(mixOmics)
data("stemcells")
summary(stemcells$study)
summary(stemcells$celltype)
library(BiocompR)
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = stemcells$study,
colors = c("blue","red","green","orange"), label = FALSE)
df.stemc<-t(data.frame(stemcells$gene))
library(BiocompR)
eva.study<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm", var.min = 10^-3, groups = stemcells$study,
colors = c("blue","red","green","orange"), label = FALSE)
eva.study$EV.plots$`1 & 2`
eva.study$EV.plots$`1 & 2`
library(GGally)
ggfacet(eva.study$PC.scores[,c(1:5)]) + geom_density_2d()
eva.cells<-EVA(data = df.stemc, use = "pairwise", method = "spearman",
adjust = "holm",var.min = 10^-3, groups = stemcells$celltype,
colors = c("blue","red","green"), label = FALSE)
eva.cells$EV.plots$`2 & 3`
eva.cells$EV.plots$`1 & 7`
eva.cells$EV.plots$`2 & 7`
devtools::document()
devtools::install()
library(BiocompR)
install.packages(pkgs = c(devtools, data.table))
install.packages(pkgs = c("devtools", "data.table"))
