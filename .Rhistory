axis.ticks.y.right = ggplot2::element_blank(),
axis.title.y.left = ggplot2::element_blank(),
axis.text.y.left = ggplot2::element_blank(),
axis.ticks.y.left = ggplot2::element_blank(),
panel.grid = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "transparent"),
plot.background = ggplot2::element_rect(fill = "transparent"),
legend.text = ggplot2::element_text(size = 11),
legend.title = ggplot2::element_text(size = 12),
legend.justification = c(0.4, 0.5)
)
#Update theme_heatmap
if(is.null(theme_heatmap)){
theme_heatmap <- theme_default_htmp + theme_forced_htmp
} else{
theme_heatmap <- theme_default_htmp + theme_heatmap + theme_forced_htmp
}
# theme_heatmap <- ggplot2::theme(
#   plot.margin = ggplot2::margin(0, 0, 0, 0),
#   panel.grid = ggplot2::element_blank(),
#   panel.background = ggplot2::element_rect(fill = "transparent"),
#   plot.background = ggplot2::element_rect(fill = "transparent"),
#   legend.text = ggplot2::element_text(size = 11),
#   legend.title = ggplot2::element_text(size = 12), legend.position = "bottom",
#   legend.justification = c(0.4, 0.5), axis.title.x = axis.title.x,
#   axis.text.x = axis.text.x, axis.ticks.x = axis.ticks.x,
#   axis.title.y.right = axis.title.y.right,
#   axis.ticks.y.right = axis.ticks.y.right,
#   axis.text.y.right = axis.text.y.right)
#Set heatmap source parameters
htmp.source <- ggplot2::ggplot() +
ggplot2::scale_fill_gradientn(colours = heatmap.pal, na.value = na.col) +
ggplot2::scale_color_manual(values = NA) +
ggplot2::scale_x_discrete(expand = c(0, 0)) +
ggplot2::guides(fill = ggplot2::guide_colorbar(
ticks = TRUE, label = TRUE, barwidth = 15, ticks.linewidth = 1,
title.vjust = 0.86, order = 1)) +
ggplot2::guides(color = ggplot2::guide_legend(
"NA", override.aes = list(fill = na.col), title.vjust = 0.5, order = 2)) +
ggplot2::labs(x = x.lab, y = y.lab, fill = lgd.scale.name)
#If facetting is on
if(!is.null(facet)){
htmp <- htmp.source +
ggplot2::facet_grid(. ~ facet.annot, scales = "free", space = "free") +
ggplot2::theme(panel.spacing = ggplot2::unit(0, "lines"),
strip.background = ggplot2::element_blank(),
strip.text = ggplot2::element_blank())
} else { htmp <- htmp.source }
#Draw heatmap with geom_tile
if(nrow(melted_mat[is.na(value)]) != 0){
#Display legend of missing values if any
htmp <- htmp + ggplot2::geom_tile(data = melted_mat, ggplot2::aes(
x = variable, y = rn, fill = value, color = " "), color = border.col,
size = border.size, width = cell.width, height = cell.height)
} else {
htmp <- htmp + ggplot2::geom_tile(
data = melted_mat, ggplot2::aes(x = variable, y = rn, fill = value),
color = border.col, size = border.size,
width = cell.width, height = cell.height)
}
if(dd.rows){
theme_heatmap <- theme_heatmap +
ggplot2::theme(axis.title.y.left = ggplot2::element_blank(),
axis.ticks.y.left = ggplot2::element_blank(),
axis.ticks.length.y.left = ggplot2::unit(0, "pt"),
axis.text.y.left = ggplot2::element_blank())
# ,
#                  plot.margin = ggplot2::unit(c(0, 0, 0, 0), "cm"))
}
# } else {
#   theme_heatmap <- theme_heatmap +
#     ggplot2::theme(axis.title.y.left = axis.title.y.left,
#                    axis.ticks.y.left = axis.ticks.y.left,
#                    axis.text.y.left = axis.text.y.left,
#                    plot.margin = ggplot2::unit(c(0, 0, 0, 0), "cm"))
# }
if(y.axis.right){
htmp <- htmp +
ggplot2::scale_y_discrete(position = 'right', expand = c(0, 0))
} else { htmp <- htmp + ggplot2::scale_y_discrete(expand = c(0, 0)) }
if(verbose){ cat("Done.\n") }
if(verbose){ cat("Configure annotations...") }
#Reoder groups and convert as factors
annot.grps <- lapply(X = annot.grps, FUN = function(i){
factor(x = i, levels =  unique(i))})
#If the distance method used on columns is not "none" reorder columns
if(method.cols != "none"){
annot.grps <- lapply(X = annot.grps, FUN = function(i){ i[column.order] })
}
#Set number of columns to display annotations legends
if(lgd.merge){
origin.grps <- lapply(X = annot.grps, FUN = function(i){
if(is.factor(i)){ levels(i) } else { levels(as.factor(i)) }
})
if(is.list(annot.pal)){
if(length(origin.grps) == length(annot.pal)){
ls.df.grp.pal <- Map(
data.frame, "Grps" = origin.grps, "Cols" = annot.pal,
stringsAsFactors = FALSE)
} else {
stop("The number of annotations does not match the number of palettes provided.")
}
} else if(is.vector(annot.pal)){
ls.df.grp.pal <- lapply(X = origin.grps, FUN = function(grp){
data.frame("Grps" = grp, "Cols" = annot.pal, stringsAsFactors = FALSE)
})
}
#Rbind list color tables
col_table <- data.table::rbindlist(ls.df.grp.pal, idcol = TRUE)
if(is.vector(annot.pal) | length(annot.pal) == 1){
#Remove duplicated colors
col_table <- col_table[!duplicated(x = Cols)]
}
#Calculate legend length
lgdsizes <- nrow(col_table) + 1
} else {
#Calculate legend length
lgdsizes <- lapply(X = annot.grps, FUN = function(i){ length(unique(i)) })
lgdsizes <- sum(unlist(lgdsizes)) + length(lgdsizes)
}
#Calculate legend columns
lgd.ncol <- ceiling(lgdsizes/30)
#Get ordered sample names
if(method.cols != "none"){ sample.names <- colnames(dframe)
} else { sample.names <- colnames(dframe) }
#Create Color Sidebar
col_sidebar <- BiocompR:::plot.col.sidebar(
sample.names = sample.names, annot.grps = annot.grps,
annot.pal = annot.pal, annot.pos = 'top', annot.sep = annot.sep,
annot.cut = annot.cut, cor.order = seq_along(colnames(dframe)),
merge.lgd = lgd.merge, right = TRUE, lgd.name = lgd.bars.name,
lgd.title = lgd.title, lgd.text = lgd.text, lgd.ncol = lgd.ncol,
axis.text.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 12, color = "black"),
axis.ticks.y = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.title.x = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
set.x.title = NULL, set.y.title = NULL, dendro.pos = 'top', facet = facet)
rm(sample.names)
if(verbose){ cat("Done.\n") }
#Extract Legend
if(verbose){ cat("Extracting legends...") }
#Create a subset plot of the original heatmap
xtrm.melted_mat <- melted_mat[
value %in% c(min(value, na.rm = TRUE), max(value, na.rm = TRUE))]
if(nrow(melted_mat[is.na(value)]) != 0){
subplot.htmp <- htmp.source +
ggplot2::geom_tile(data = xtrm.melted_mat,
ggplot2::aes(x = variable, y = rn, fill = value, color = " "))
} else {
subplot.htmp <- htmp.source +
ggplot2::geom_tile(
data = xtrm.melted_mat,
mapping = ggplot2::aes(x = variable, y = rn, fill = value))
}
htmp_legend <- BiocompR::get.lgd(gg2.obj = subplot.htmp + theme_heatmap)
rm(subplot.htmp)
sidebar_legend <- col_sidebar$legends
#Convert ggplots into grobs
if(dd.cols){ ddgr_seg_col <- ggplot2::ggplotGrob(ddgr_seg_col) }
if(dd.rows){ ddgr_seg_row <- ggplot2::ggplotGrob(ddgr_seg_row) }
col_sidebar_grob <- ggplot2::ggplotGrob(col_sidebar$sidebar)
rm(col_sidebar)
htmp <- htmp + theme_heatmap + ggplot2::theme(legend.position = "none")
if(verbose){ cat("Done.\n") }
#Heatmap rasterization
if(!is.null(raster)){
if(verbose){ cat("Rasterizing...\n") }
if(raster %in% magick::filter_types()){
#Create "empty" theme
theme_empty <- ggplot2::theme(
plot.margin = ggplot2::margin(0, 0, 0, 0),
panel.grid = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "transparent"),
plot.background = ggplot2::element_rect(fill = "transparent"),
axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.title.y.right = ggplot2::element_blank(),
axis.ticks.y.right = ggplot2::element_blank(),
axis.text.y.right = ggplot2::element_blank(),
axis.title.y.left = ggplot2::element_blank(),
axis.ticks.y.left = ggplot2::element_blank(),
axis.text.y.left = ggplot2::element_blank(),
axis.ticks.length = ggplot2::unit(0, "pt"))
#If facet is used
if(!is.null(facet)){
if(verbose){ cat("Facet rasterization:\n") }
ls.rasters <- lapply(
X = levels(melted_mat$facet.annot), FUN = function(i){
if(verbose){ cat(paste("\t", i, "\n")) }
#Create sub DT
sub.melted <- melted_mat[facet.annot == i]
#Create sub heatmap and remove all customization
sub.htmp <- ggplot2::ggplot() +
ggplot2::geom_tile(data = sub.melted, ggplot2::aes(
x = variable, y = rn, fill = value, color = " ")) +
ggplot2::scale_fill_gradientn(
colours = heatmap.pal, na.value = na.col) +
ggplot2::scale_color_manual(values = NA) +
ggplot2::scale_x_discrete(expand = c(0, 0)) +
ggplot2::scale_y_discrete(expand = c(0, 0)) +
ggplot2::guides(fill = ggplot2::guide_colorbar(
ticks = TRUE, label = TRUE, barwidth = 15, ticks.linewidth = 1,
title.vjust = 0.86, order = 1)) +
ggplot2::guides(color = ggplot2::guide_legend(
"NA", override.aes = list(fill = na.col), title.vjust = 0.5,
order = 2)) +
ggplot2::labs(x = x.lab, y = y.lab, fill = lgd.scale.name) +
theme_empty + ggplot2::theme(legend.position = "none")
rm(sub.melted)
#Rasterize ggplot into a grob
raster.grob <- BiocompR::raster.ggplot.to.grob(
gg.plot = sub.htmp, filter = raster)
rm(sub.htmp)
#Make grob annotation
raster.annot <- BiocompR::annotation_custom2(
grob = raster.grob, xmin = -Inf, xmax = Inf, ymin = -Inf,
ymax = Inf, data = melted_mat[facet.annot == i])
rm(raster.grob)
return(raster.annot)
})
#Fit the list of raster grobs into a ggplot
htmp <- ggplot2::ggplot(
data = melted_mat, ggplot2::aes(x = variable, y = rn, fill = value)) +
ggplot2::geom_blank() + theme_heatmap +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(x = x.lab, y = y.lab) +
ggplot2::facet_grid(. ~ facet.annot, scales = "free",
space = "free") +
ggplot2::theme(
panel.spacing = ggplot2::unit(0, "lines"),
strip.background = ggplot2::element_blank(),
strip.text = ggplot2::element_blank()) +
ls.rasters
} else {
#Remove all customization
htmp <- htmp + theme_empty
#Catch heatmap in magick::image_graph()
raster.annot <- BiocompR::raster.ggplot.to.grob(
gg.plot = htmp, filter = raster)
#Make grob annotation
raster.annot <- ggplot2::annotation_custom(
raster.grob, -Inf, Inf, -Inf, Inf)
#Fit the raster grob into a ggplot
htmp <- ggplot2::ggplot(
data = melted_mat, ggplot2::aes(x = variable, y = rn, fill = value)) +
ggplot2::geom_blank() + raster.annot + theme_heatmap +
ggplot2::theme(legend.position = "none") +
ggplot2::labs(x = x.lab, y = y.lab)
}
} else { stop("Rasterization filter not supported.") }
if(verbose){ cat("Done.\n") }
}
#Remove melted_mat
rm(melted_mat)
if(verbose){ cat("Converting ggplot into grid object...") }
htmp <- ggplot2::ggplotGrob(x = htmp)
if(verbose){ cat("Done.\n") }
#Resize grobs widths
if(verbose){ cat("Redimensioning grobs...") }
if(dd.cols & dd.rows){
ls.w.grobs <- list(
'dd_col' = ddgr_seg_col, 'sidebar' = col_sidebar_grob, 'htmp' = htmp)
upd.grob_w <- BiocompR::resize.grobs(
ls.grobs = ls.w.grobs, dimensions = "widths", start.unit = 4,
end.unit = 7)
rm(ddgr_seg_col)
} else if(dd.cols & !dd.rows){
ls.w.grobs <- list(
'dd_col' = ddgr_seg_col, 'sidebar' = col_sidebar_grob, 'htmp' = htmp)
upd.grob_w <- BiocompR::resize.grobs(
ls.grobs = ls.w.grobs, dimensions = "widths", start.unit = 3,
end.unit = 7)
rm(ddgr_seg_col)
} else {
ls.w.grobs <- list('sidebar' = col_sidebar_grob, 'htmp' = htmp)
if(is.null(facet)){
upd.grob_w <- BiocompR::resize.grobs(
ls.grobs = ls.w.grobs, dimensions = "widths", start.unit = 3,
end.unit = 7)
} else {
upd.grob_w <- BiocompR::resize.grobs(
ls.grobs = ls.w.grobs, dimensions = "widths", start.unit = 1,
end.unit = max(unlist(lapply(X = ls.w.grobs, FUN = function(i){
length(i[["widths"]]) }))))
}
}
rm(htmp, col_sidebar_grob)
#Resize grobs heights
if(dd.rows){
ls.h.grobs <- list('dd_row' = ddgr_seg_row, 'htmp' = upd.grob_w$htmp)
upd.grob_h <- BiocompR::resize.grobs(
ls.grobs = ls.h.grobs, dimensions = 'heights', start.unit = 7,
end.unit = 9)
rm(ddgr_seg_row)
} else { upd.grob_h <- list("htmp" = upd.grob_w$htmp) }
if(verbose){ cat("Done.\n") }
#Create the Right Panel for legends
if(verbose){ cat("Stacking legends...") }
right.legends <- BiocompR:::stack.grobs.legends(
grobs.list = sidebar_legend, annot.grps = annot.grps,
height.lgds.space = 29)
rm(sidebar_legend)
if(verbose){ cat("Done.\n") }
#Combine Dendrogram with Color Sidebar and Heatmap
if(verbose){ cat("Creating final plot...") }
if(dd.rows & dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(
grobs = list(grid::textGrob(""), upd.grob_w$dd_col,
grid::textGrob(""), upd.grob_w$sidebar,
upd.grob_h$dd_row, upd.grob_h$htmp),
ncol = 2, nrow = 3, heights = c(dend.col.size + 2, annot.size, 30),
widths = c(dend.row.size + 1, 10))
#Set default legend width space
def.lgd.width <- 2
} else if(!dd.rows & !dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(grobs = list(
upd.grob_w$sidebar, upd.grob_h$htmp), ncol = 1, nrow = 2,
heights = c(annot.size, 30), widths = 10)
#Set default legend width space
def.lgd.width <- 1
} else if(dd.rows & !dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(grobs = list(
grid::textGrob(""), upd.grob_w$sidebar, upd.grob_h$dd_row,
upd.grob_h$htmp), ncol = 2, nrow = 2, heights = c(annot.size, 30),
widths = c(dend.row.size + 1, 10))
#Set default legend width space
def.lgd.width <- 2
} else if(!dd.rows & dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(grobs = list(
upd.grob_w$dd_col, upd.grob_w$sidebar, upd.grob_h$htmp), ncol = 1,
nrow = 3, heights = c(dend.col.size + 2, annot.size, 30), widths = 10)
#Set default legend width space
def.lgd.width <- 1
}
#rm(upd.grob_w, upd.grob_h)
#Final plot
final.plot <- gridExtra::grid.arrange(gridExtra::arrangeGrob(
top = grid::textGrob(
plot.title, gp = grid::gpar(fontsize = 15, font = 1)),
grobs = list(grid::textGrob(paste0(
"Columns ordered by ", method.cols, " distance; Rows ordered by ",
method.rows, " distance; ", nrow(dframe), " ", row.type, "."),
gp = grid::gpar(fontsize = 12, fontface = 3L)),
gridExtra::arrangeGrob(grobs = list(main_grob, right.legends), ncol = 2,
widths = c(20, def.lgd.width + lgd.space.width)),
htmp_legend), nrow = 3, heights = c(3, 50, 6)))
rm(main_grob)
#Prepare results
ls.res <- list(
"result.grob" = final.plot, "heatmap.grob" = upd.grob_h$htmp,
"heatmap.lgd.grob" = htmp_legend, "sidebar.grob" = upd.grob_w$sidebar,
"sidebar.lgds.grob" = right.legends)
rm(final.plot, htmp_legend, right.legends)
if(dd.cols){ ls.res[["cols.dendrogram.grob"]] <- upd.grob_w$dd_col }
if(dd.rows){ ls.res[["rows.dendrogram.grob"]] <- upd.grob_h$dd_row }
rm(upd.grob_w, upd.grob_h)
if(verbose){ cat("Done.\n") }
#Return a list of grobs with final plot and separate grobs.
return(ls.res)
}
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
# axis.title.y.left = ggplot2::element_text(size = 14),
# axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.left = ggplot2::element_line(color = "black"),
# axis.title.y.right = ggplot2::element_text(size = 14),
# axis.text.y.right = ggplot2::element_text(size = 12, colour = "black"),
axis.ticks.y.right = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep")
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
# axis.title.y.left = ggplot2::element_text(size = 14),
# axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.left = ggplot2::element_line(color = "black"),
# axis.title.y.right = ggplot2::element_text(size = 14),
axis.text.y.right = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.right = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep")
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
# axis.title.y.left = ggplot2::element_text(size = 14),
# axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.left = ggplot2::element_line(color = "black"),
# axis.title.y.right = ggplot2::element_text(size = 14),
# axis.text.y.right = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.right = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep")
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
# axis.title.y.left = ggplot2::element_text(size = 14),
# axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.left = ggplot2::element_line(color = "black"),
axis.title.y.right = ggplot2::element_text(size = 14),
# axis.text.y.right = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.right = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep")
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
axis.title.y.left = ggplot2::element_text(size = 14),
axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
axis.ticks.y.left = ggplot2::element_line(color = "black"),
# axis.title.y.right = ggplot2::element_text(size = 14),
# axis.text.y.right = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.right = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep")
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
# axis.title.y.left = ggplot2::element_text(size = 14),
# axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
# axis.ticks.y.left = ggplot2::element_line(color = "black"),
axis.title.y.right = ggplot2::element_text(size = 14),
axis.text.y.right = ggplot2::element_text(size = 12, colour = "black"),
axis.ticks.y.right = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep", y.axis.right = TRUE)
gg2heatmap(
m = m_green, dendrograms = c(FALSE, TRUE),
row.type = paste(target, "QC probes"),
plot.title = "HM450K deviation score of green channel fluorescence intensities",
dist.method = c("none", "manhattan"),
y.lab = paste(target, "quality control probes"),
lgd.scale.name = "% Fluorescence\ndeviation score",
heatmap.pal = c("mediumblue", "green3", "red"), ncores = ncores,
theme_heatmap = theme(
axis.title.y.left = ggplot2::element_text(size = 14),
axis.text.y.left = ggplot2::element_text(size = 12, colour = "black"),
axis.ticks.y.left = ggplot2::element_line(color = "black"),
axis.title.x = ggplot2::element_text(size = 14),
axis.text.x = element_text(
size = 8, angle = -90, hjust = 0, vjust = 0.5, colour = "black"),
panel.background = element_rect(fill = "green"),
panel.border = element_rect(color = "green", fill = NA, size = 2)),
cell.size = c(1, 0.95), na.handle = "keep")
devtools::document()
