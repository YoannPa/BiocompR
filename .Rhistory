}
#Subset the loadings displayed if some cut-off
if(!is.null(load.above.x) | !is.null(load.below.x)){
if(!is.null(load.above.x) & is.null(load.below.x)){
loadings.data <- loadings.data[PCx >= load.above.x]
} else if(!is.null(load.below.x) & is.null(load.above.x)){
loadings.data <- loadings.data[PCx <= load.below.x]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
if(!is.null(load.above.y) | !is.null(load.below.y)){
if(!is.null(load.above.y) & is.null(load.below.y)){
loadings.data <- loadings.data[PCy >= load.above.y]
} else if(!is.null(load.below.y) & is.null(load.above.y)){
loadings.data <- loadings.data[PCy <= load.below.y]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
}
#Make PCA ggplot
biplt <- ggplot() +
theme(axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid = element_line(colour = "grey"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.key = element_blank())
if(!is.null(color.data) & is.null(shape.data)){
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data), size = point.size) +
labs(x = lab.PC[1], y = lab.PC[2], color = color.data)
} else if(!is.null(color.data) & !is.null(shape.data)){
if(color.data != shape.data){
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = shape.data),
size = point.size) +
labs(
x = lab.PC[1], y = lab.PC[2], shape = shape.data, color = color.data)
} else {
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
labs(
x = lab.PC[1], y = lab.PC[2], shape = color.data, color = color.data)
}
} else if(is.null(color.data) & is.null(shape.data)){
biplt <- biplt +
geom_point(data = dt.scaled.pc, mapping = aes(x = PCx, y = PCy),
color = "black", size = point.size) +
labs(x = lab.PC[1], y = lab.PC[2])
} else if(is.null(color.data) & !is.null(shape.data)){
biplt <- biplt +
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, shape = shape.data),
color = "black", size = point.size) +
labs(x = lab.PC[1], y = lab.PC[2], shape = shape.data)
}
# if(!is.null(scale.color.manual)){
#   biplt <- biplt + scale_color_manual(values = scale.color.manual)
# }
# if(!is.null(scale.shape.manual)){
#   biplt <- biplt + scale_shape_manual(values = scale.shape.manual)
# }
#Draw loadings
if(loadings){
biplt <- biplt + geom_segment(
data = loadings.data, mapping = aes(x = 0, y = 0, xend = PCx, yend = PCy),
arrow = grid::arrow(length = grid::unit(8, "points")),
colour = loadings.col) +
ggrepel::geom_label_repel(
data = loadings.data, mapping = aes(x = PCx, y = PCy, label = labels),
size = 3)
}
#Return PCA biplot
return(biplt)
}
ggbipca(prcomp.res = pca.res, data = iris)
ggbipca(prcomp.res = pca.res, data = iris, PCx = 2, PCy = 3)
ggbipca(prcomp.res = pca.res, data = iris, scale = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2, color.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2, color.data = "Species", shape.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange"))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species",
scale.shape.manual = ) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
devtools::document()
setwd("/home/yoann/BiocompR/")
devtools::document()
devtools::install()
pca.res <- prcomp(iris[,-5])
ggbipca(prcomp.res = pca.res, data = iris)
library(BiocompR)
ggbipca(prcomp.res = pca.res, data = iris)
ggbipca(prcomp.res = pca.res, data = iris, PCx = 2, PCy = 3)
ggbipca(prcomp.res = pca.res, data = iris, scale = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange"))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple") +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple", top.load.by.quad = 1) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple", load.above.x = 0.05, load.above.y = 0) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple", top.load.by.quad = 1, load.above.x = 0.1) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
##IMPORTS
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c("data.table", "ggplot2", "ggfortify", "BiocompR", "ggsci")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/handle_PCAWG_cohorts.R")
source("PCAWG_Paper/src/funRDS.R")
##PARAMETERS
#Load cohort QC matrices
ls.mQC <- readRDSls(dirRDS = "PCAWG_Paper/data/QC_dataset/")
#Load annotation for the intensities measured.
QC.annot <- fread(file = "PCAWG_Paper/data/QC_dataset/QC_annotation.csv")
#Load palette
# palette <- colorRampPalette(colors = pal_npg("nrc", alpha = 1)(10))(27)
palette <- c(pal_npg("nrc", alpha = 1)(10),pal_npg("nrc", alpha = 1)(10),pal_npg("nrc", alpha = 1)(7))
##ANALYSIS
#Merge data matrices into a data.table
QC.dt <- as.data.table(do.call(cbind, ls.mQC))
#Bring annotation with data
QC.dt <- cbind(QC.annot, QC.dt)
#Remove empty rows
QC.dt <- QC.dt[!apply(X = apply(
X = QC.dt[, -c(1:11), ], MARGIN = 1, FUN = is.na), MARGIN = 2, FUN = all), ]
QC.dt[, Target := as.factor(Target)]
#Compute PCA
# pca_res <- prcomp(QC.dt[, -c(1:11), ], scale. = TRUE)
pca_res <- prcomp(QC.dt[, -c(1:11), ], scale. = FALSE)
# autoplot() on target types ###################################################
# autoplot(object = pca_res, data = QC.dt, colour = "Channel", shape = "Target",
#          size = 3, scale = 1, loadings = TRUE, loadings.label = TRUE,
#          loadings.label.size = 3, loadings.label.colour = "black") +
#   scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84)) +
#   scale_color_manual(values = c("#00ff00", "red"))
# ggbipca() on target types ####################################################
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
warn.handle(
pattern = "unlabeled data points \\(too many overlaps\\). Consider increasing max.overlaps",
print(target.biplot))
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
target.biplot
melt.QC.dt <- melt(
QC.dt, id.vars = colnames(QC.dt)[1:11], variable.name = "Samples")
t.QC.dt <- dcast(melt.QC.dt, formula = Samples ~ Channel + Description)
#Load Sample annotations
sample.annotation <- make_cohorts_annotations(
pcawg.csv = "PCAWG4_Methylation_Metadata/PCAWG4_ICGC_TCGA.csv",
idat_folder = "PCAWG_Paper/data/HM450K_idat/OV-AU_idats/")
sample.annotation <- rbindlist(l = sample.annotation, idcol = "Cohorts")
#Merge sample annotation with t.QC.dt
t.QC.dt <- merge(x = sample.annotation, y = t.QC.dt, by.x = "ID",
by.y = "Samples", all.y = TRUE)
pca_t.res <- prcomp(t.QC.dt[, -c(1:6), ], scale. = FALSE)
ggbipca(prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
top.load.by.quad = 5, color.data = "Cohorts", shape.data = "Cohorts",
scale.shape.manual = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17),
point.size = 2.5) +
scale_color_manual(values = palette)
ggbipca(prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
top.load.by.quad = 5, color.data = "Cohorts", shape.data = "Cohorts",
point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_QCprobes_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
sample.biplot <- ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE, top.load.by.quad = 5,
color.data = "Cohorts", shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
sample.biplot
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Samples_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = sample.biplot, device = "pdf", width = 9.92, height = 6.09)
ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "blue", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "black", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
sample.biplot <- ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "black", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = sample.biplot, device = "pdf", width = 9.92, height = 6.09)
ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_QCprobes_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
sample.biplot <- ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "black", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = sample.biplot, device = "pdf", width = 9.92, height = 6.09)
setwd("/home/yoann/BiocompR/")
devtools::document()
devtools::install()
install.packages(c("cachem", "cli", "crayon", "data.table", "dotCall64", "farver", "foreign", "gert", "Hmisc", "lifecycle", "MASS", "mgcv", "mime", "nlme", "pillar", "pkgload", "promises", "ps", "RcppArmadillo", "RcppParallel", "spatial", "testthat", "tibble", "usethis", "waldo", "xfun"))
install.packages(c("foreign", "MASS", "mgcv", "nlme", "spatial"))
devtools::document
devtools::document()
devtools::install()
library(BiocompR)
load.palettes()
?load.palettes()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(data.table)
library(BiocompR)
my_dt <- fread("/home/yoann/Téléchargements/ggcrav_sample.csv")
?ggcraviola
my_dt
table(my_dt$Samples)
my_dt[Groups == 2]
my_dt[Groups == 1]
my_dt[Groups == 3]
my_dt[Groups == 4]
my_dt[Groups == 5]
table(my_dt$Groups)
table(my_dt$Conditions)
my_dt[, Samples := paste(Conditions, Groups, sep = "_")]
my_dt
ggcraviola(data = my_dt)
ggcraviola(data = my_dt, craviola.width = 0.01)
ggcraviola(data = my_dt, craviola.width = 0.05)
ggcraviola(data = my_dt, craviola.width = 0.06)
library(data.table)
library(BiocompR)
my_dt <- fread("/home/yoann/Téléchargements/ggcrav_sample.csv")
# my_dt[, Samples := paste(Conditions, Groups, sep = "_")]
ggcraviola(data = my_dt, craviola.width = 0.06)
data = my_dt
!is.data.table(data)
unique(x = data, by = 1)
unique.dt <- unique(x = data, by = 1)
ncol(data) < 4
unique.dt <- unique(x = data, by = 1)
unique.dt[, 1:3]
Annot.table <- unique.dt[, 1:3]
unique(Annot.table, by = 3)
data = my_dt
unique.dt <- unique(x = data, by = 1)
unique.dt
nrow(unique.dt) == 2
df.complete = data.frame(
Samples = rep(paste0("Sample", c(1:6)), each = 1000),
Groups = rep(c('A', 'B', 'C'), each = 2000),
Conditions = rep(c('I', 'J'), each = 1000,3),
Values = c(rnorm(1000, 0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000, -3), rnorm(1000, -3.5)))
df.complete
data = df.complete
if(!is.data.table(data)){ data <- as.data.table(data) }
#Make annotation table
unique.dt <- unique(x = data, by = 1)
unique.dt
ncol(data) < 4
Annot.table <- unique.dt[, 1:3]
nrow(unique(Annot.table, by = 3))
unique(Annot.table, by = 3)
data = my_dt
if(!is.data.table(data)){ data <- as.data.table(data) }
#Make annotation table
unique.dt <- unique(x = data, by = 1)
ncol(data) < 4
Annot.table <- unique.dt[, 1:3]
Annot.table
unique(Annot.table, by = 3)
Annot.table[Groups == 2]
Annot.table[, .N, by = "Groups"]
Annot.table
Annot.table[, .N, by = "Groups"]
Annot.table[, .N, by = "Groups"]$N
any(Annot.table[, .N, by = "Groups"]$N > 2)
all(Annot.table[, .N, by = "Groups"]$N > 2)
Annot.table[, .N, by = "Groups"]$N > 2
devtools::document()
devtools::install()
library(data.table)
library(BiocompR)
my_dt <- fread("/home/yoann/Téléchargements/ggcrav_sample.csv")
# my_dt[, Samples := paste(Conditions, Groups, sep = "_")]
ggcraviola(data = my_dt, craviola.width = 0.06)
df.minimal = data.frame(
Samples = rep(paste0("Sample", c(1:2)), each = 1000),
Values = c(rnorm(1000, 0), rnorm(1000, 0.5)))
ggcraviola(data = df.minimal, lines.col = "black")
df.complete = data.frame(
Samples = rep(paste0("Sample", c(1:6)), each = 1000),
Groups = rep(c('A', 'B', 'C'), each = 2000),
Conditions = rep(c('I', 'J'), each = 1000,3),
Values = c(rnorm(1000, 0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000, -3), rnorm(1000, -3.5)))
ggcraviola(data = df.complete, lines.col = "black")
df.complete2 = data.frame(
Samples = rep(paste0("Sample", c(1:6)), each = 1000),
Groups = rep(c('A', 'B', 'C'), each = 2000),
Conditions = rep(c('I', 'J'), each = 1000, 3),
Values = c(rnorm(1000, 0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000, -3), rnorm(1000, -3.5)),
Scnd.Var = rep(rep(x = c(60, 50, 40, 30, 20, 10, 30, 40, 50, 60),
each = 100), 6))
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE)
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE) +
labs(alpha = "SD(2nd Variable)") + # Rename alpha legend
ggtitle("This is a Craviola plot!") + # Add title
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 14, color = "black"),# Custom axis text
axis.title = element_text(size = 15),
legend.title = element_text(size = 13), # Change legend font size
legend.text = element_text(size = 12),
panel.background = element_blank(), # Change panel appearance
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey"),
panel.grid.minor.y = element_line(color = "grey")) +
scale_y_continuous(expand = c(0, 0)) + #Expand fully plot panel on Y-axis
scale_fill_manual(labels = c("Control", "Case"), # Rename conditions
values = c("dodgerblue", "darkorange")) # Change colors
my_dt <- fread("/home/yoann/Téléchargements/ggcrav_sample.csv")
my_dt[, Samples := paste(Conditions, Groups, sep = "_")]
ggcraviola(data = my_dt, craviola.width = 0.06)
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(data.table)
library(ggplot2)
dt.data <- data.table("data.covered" = c(10,15,50,40))
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = lgd.pos) +
geom_bar(data = dt.data, mapping = aes(x = 0, y = data.covered),
stat = "identity") +
)
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = lgd.pos) +
geom_bar(data = dt.data, mapping = aes(x = 0, y = data.covered),
stat = "identity")
dt.data <- data.table("data.covered" = c(10,15,50,40))
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = "bottom") +
geom_bar(data = dt.data, mapping = aes(x = 0, y = data.covered),
stat = "identity")
dt.data <- data.table(
"data.covered" = c(10, 15, 50, 40),
"sample.amount" = c(1, 2, 3, 4))
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = "bottom") +
geom_bar(data = dt.data,
mapping = aes(x = 0, y = data.covered, fill = sample.amount),
stat = "identity")
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = "bottom") +
geom_bar(data = dt.data,
mapping = aes(x = 0, y = data.covered, fill = sample.amount),
stat = "identity") +
scale_y_continuous(
expand = c(0, 0),
breaks = seq(0, 120, length.out = 15),
labels = function(x) format(x, digits = 2, scientific = TRUE),
sec.axis = sec_axis(
trans = ~.,
breaks = 35,
labels = "label test") +
scale_x_continuous(expand = c(0, 0))
)
ggplot() + theme_gray() +
theme(legend.title.align = 0.5,
legend.text = element_text(size = 12),
legend.position = "bottom") +
geom_bar(data = dt.data,
mapping = aes(x = 0, y = data.covered, fill = sample.amount),
stat = "identity") +
scale_y_continuous(
expand = c(0, 0),
breaks = seq(0, 120, length.out = 15),
labels = function(x) format(x, digits = 2, scientific = TRUE),
sec.axis = sec_axis(
trans = ~.,
breaks = 35,
labels = "label test")) +
scale_x_continuous(expand = c(0, 0))
rsession()
Rsession()
sessionInfo()
