ggcraviola(data = df.complete, lines.col = "black")
#Using a 'complete' data.frame with support of an additional variable:
df.complete2 = data.frame(
Samples=rep(paste0("Sample",c(1:6)),each = 1000),
Groups=rep(c('A','B','C'),each = 2000),
Conditions=rep(c('I','J'),each = 1000,3),
Values=c(rnorm(1000,0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000,-3), rnorm(1000, -3.5)),
Scnd.Var = rep(rep(x =c(60,50,40,30,20,10,30,40,50,60),
each=100),6))
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE)
#Using a 'complete' data.frame with support of an additional variable:
df.complete2 = data.frame(
Samples=rep(paste0("Sample",c(1:6)),each = 1000),
Groups=rep(c('A','B','C'),each = 2000),
Conditions=rep(c('I','J'),each = 1000,3),
Values=c(rnorm(1000,0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000,-3), rnorm(1000, -3.5)),
Scnd.Var = rep(rep(x =c(60,50,40,30,20,10,30,40,50,60),
each=100),6))
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE)
#Use ggplot2 to add components and customize the Craviola plot
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE) +
labs(alpha = "SD(2nd Variable)") +
ggtitle("This is a Craviola plot!") +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 14, color = "black"),
axis.title = element_text(size = 15),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey"),
panel.grid.minor.y = element_line(color = "grey")) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(labels = c("Control","Case"),
values = c("dodgerblue","darkorange"))
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
setwd("/run/user/1000/gvfs/sftp:host=odcf-worker01/icgc/dkfzlsdf/analysis/G200/pageaud/PhD/Brors_Lab/Pancan_Repeats_Methylation")
Imports = c("IlluminaHumanMethylation450kprobe","GenomicRanges","gtools",
"data.table","reshape","ggsci","RColorBrewer","DescTools","Hmisc",
"gridExtra","grid","BiocompR")
invisible(lapply(Imports, library, character.only = T))
source("src/report_mat_metrics.R")
# source("src/ggcraviola.R")
# source("src/ggcoverage.R")
source("src/create_dendrogram.R")
source("src/create_ggheatmap.R")
source("src/extract_gglegend.R")
source("src/mat_na_rm.R")
##PARAMETERS
data("IlluminaHumanMethylation450kprobe")
data.dir<-"data/HM450K"
repeats.dir<-"data/rmsk.txt.gz"
palette.heatmap<-rev(brewer.pal(n = 9,name = "RdBu"))
##ANALYSIS
#Load repeats
hg19_repeats<-fread(repeats.dir, nThread = 7)
#Get genomic regions of the HM450K probes ; 0-based position of cytosines.
HM450k.probes<-data.table("chr" =
as.character(IlluminaHumanMethylation450kprobe$chr),
"start" = IlluminaHumanMethylation450kprobe$site-1,
"end" = IlluminaHumanMethylation450kprobe$site,
"strand" = IlluminaHumanMethylation450kprobe$strand,
"probeIDs"=IlluminaHumanMethylation450kprobe$Probe_ID,
stringsAsFactors = F)
#Keep CpG probes and remove CpH probes
HM450k.probes<-HM450k.probes[like(probeIDs,"cg")]
c.order<-unique(HM450k.probes$chr[mixedorder(HM450k.probes$chr)]) #Chr nat.order
#Order probes tables
HM450k.probes<-HM450k.probes[order(match(chr,c.order),start,end)]
#Create region column
HM450k.probes[, regions := do.call(paste, c(.SD, sep = "-")),
.SDcols = c("start","end")]
HM450k.probes[, regions := do.call(paste, c(.SD, sep = ":")),
.SDcols = c("chr","regions")]
DT.meth<-readRDS("data/DT_samples_meth.RDS")
#Convert to a matrix
df.meth<-as.data.frame(DT.meth[,-c("probeIDs","regions"), with = FALSE])
rownames(df.meth)<-DT.meth$regions
mat.meth<-as.matrix(df.meth)
#Compute Metrics on beta values matrix of all probes available from HM450K data
res_plots<-report.mat.metrics(mat.meth = mat.meth, ncores = 7)
#Add colnames from UCSC to Repeats table
colnames(hg19_repeats)<-c("bin","swScore","milliDiv","milliDel","milliIns",
"genoName","genoStart","genoEnd","genoLeft","strand",
"repName","repClass","repFamily","repStart","repEnd",
"repLeft","id")
#Keep genoName, genoStart, geneEnd, strand, repName, repClass and repFamily.
hg19_repeats<-hg19_repeats[,c(6:8,10:13),with=FALSE]
#Replace SINE tRNA Family by tRNA_SINE
hg19_repeats[repClass == "SINE" & repFamily == "tRNA", repFamily:="SINE_tRNA"]
#Filter out unmapped scaffolds and uncertain repeats families
hg19_repeats<-hg19_repeats[like(genoName,"^chr[0-9XY][0-9]*$")]
hg19_repeats<-hg19_repeats[like(repFamily,"^.*[^?]$")]
#5212846 repeats after cleaning
#Replace chromosome names
hg19_repeats<-hg19_repeats[,genoName:=as.factor(genoName)]
levels(hg19_repeats$genoName)<-mixedsort(levels(hg19_repeats$genoName))
levels(hg19_repeats$genoName)<-c(seq(1:22),"X","Y")
#Order repeats by chromosome, start and end
hg19_repeats<-hg19_repeats[order(genoName,genoStart,genoEnd)]
#Create GRanges for HM450 probes found in PanCancer dataset
GR_HM450K<-merge(HM450k.probes[,-c("start","probeIDs"),with=FALSE],
DT.meth[,"regions",with=FALSE],by = "regions", all=F)
GR_HM450K<-makeGRangesFromDataFrame(
df = GR_HM450K, keep.extra.columns = TRUE, ignore.strand = FALSE,
seqnames.field = "chr", start.field = "end", end.field = "end",
strand.field = "strand")
GR_HM450K<-sortSeqlevels(GR_HM450K)
GR_HM450K<-sort(GR_HM450K) #Sort by seqnames, by strand then by start and end
#Create GRanges for Repeats
GR_repeats<-makeGRangesFromDataFrame(
df = hg19_repeats, keep.extra.columns = TRUE, ignore.strand = FALSE,
seqnames.field = "genoName", start.field = "genoStart", end.field = "genoEnd",
strand.field = "strand", starts.in.df.are.0based = TRUE)
GR_repeats<-sort(GR_repeats)
#Merge by Overlap HM450K probes and Repeats (WARNING: strand is ignored!)
# df_Probes_Rep<-mergeByOverlaps(query = GR_HM450K,subject = GR_repeats)
df_Probes_Rep<-mergeByOverlaps(
query = GR_HM450K, subject = GR_repeats, ignore.strand=TRUE)
df_Probes_Rep<-as.data.frame(df_Probes_Rep)
#Create a vector for the type of repeats(TE VS Non-TE)
# TE = c("LINE", "LTR", "SINE", "DNA", "RC")
# Non-TE = c("Simple_repeat", "Low_complexity","tRNA","snRNA","Other","Satellite","Unknown","rRNA","srpRNA","RNA","scRNA")
repeat_type<-df_Probes_Rep$repClass
repeat_type[repeat_type %in% c("LINE", "LTR", "SINE", "DNA", "RC")]<-"TE"
repeat_type[repeat_type != "TE"]<-"Non-TE"
#Create a vector for transposition activity (Retrotransposon VS DNA_Transposon)
# Retrotransposon = c("LINE", "LTR", "SINE")
# DNA_Transposon = c("DNA", "RC")
# Non_Transposon = c("Simple_repeat", "Low_complexity","tRNA","snRNA","Other","Satellite","Unknown","rRNA","srpRNA","RNA","scRNA")
repeat_tr.mode<-df_Probes_Rep$repClass
repeat_tr.mode[repeat_tr.mode %in% c("LINE", "LTR", "SINE")]<-"Retrotransposon"
repeat_tr.mode[repeat_tr.mode %in% c("DNA", "RC")]<-"DNA_Transposon"
repeat_tr.mode[!repeat_tr.mode %in% c("Retrotransposon", "DNA_Transposon")]<-
"Non_Transposon"
#Create a data.table containing all information about probes and repeats
DT_Probes_Rep<-data.table("chrosome" = df_Probes_Rep$GR_HM450K.seqnames,
"strand" = df_Probes_Rep$GR_HM450K.strand,
"regions" = df_Probes_Rep$regions,
"Repeats_Regions" =
paste(df_Probes_Rep$GR_repeats.seqnames,
paste(df_Probes_Rep$GR_repeats.start-1,
df_Probes_Rep$GR_repeats.end,sep = "-"),
sep = ":"),
"Type" = repeat_type,
"Mode" = repeat_tr.mode,
"Class" = df_Probes_Rep$repClass,
"Family" = df_Probes_Rep$repFamily,
"Name" = df_Probes_Rep$repName,
"Width" = df_Probes_Rep$GR_repeats.width)
#Create the full data.table with all information + methylation
DT_full<-merge(DT_Probes_Rep, DT.meth, by = "regions", all=F)
DT_full<-DT_full[mixedsort(regions)]
#Check if any probes IDs overlap multiple repeat regions
DT.multirep.probes<-unique(DT_full[, 1:11][
duplicated(probeIDs) | duplicated(probeIDs, fromLast=TRUE)])
multirep_probes<-unique(as.character(DT.multirep.probes$probeIDs))
#When Strand is not ignored: 50 probes overlap at least 2 repeat regions.
#When Strand is ignored: 161 probes overlap at least 2 repeat regions.
#Get Table of these multirep probes
fwrite(x = DT.multirep.probes, file = "data/Multirep_Probes.tsv",sep = "\t",
row.names = FALSE)
DT[, 1:11]
DT_full[, 1:11]
unique(DT_full[, 1:11])
duplicated(DT_full[, 1:11])
DT_full[duplicated(DT_full[, 1:11]), c(1:11), with=FALSE]
DT_full[duplicated(DT_full[, 1:11]) | duplicated(DT_full[, 1:11], fromLast=T), c(1:11), with=FALSE]
DT_Probes_Rep
dim(DT_Probes_Rep)
dim(unique(DT_Probes_Rep))
#Create the full data.table with all information + methylation
DT_full<-merge(DT_Probes_Rep, DT.meth, by = "regions", all.x=TRUE)
dim(DT_full)
dim(unique(DT_full))
DT_full<-DT_full[mixedsort(regions)]
DT_full[, 1:11][
duplicated(probeIDs) | duplicated(probeIDs, fromLast=TRUE)]
unique(DT_full[, 1:11][
duplicated(probeIDs) | duplicated(probeIDs, fromLast=TRUE)])
dim(DT_full)
DT_full<-merge(DT_Probes_Rep, DT.meth, by = "regions", all.x=TRUE)
dim(DT_full)
DT_full<-DT_full[mixedsort(regions)]
dim(DT_full)
dim(unique(DT_full[,1:11]))
unique(DT_full[,1:11])
DT_full<-merge(DT_Probes_Rep, DT.meth, by = "regions", all.x=TRUE)
dim(DT_full)
DT_full<-DT_full[mixedorder(regions)]
dim(DT_full)
DT_full[, 1:11]
DT_full[, 1:11][
duplicated(probeIDs) | duplicated(probeIDs, fromLast=TRUE)]
unique(DT_full[, 1:11][
duplicated(probeIDs) | duplicated(probeIDs, fromLast=TRUE)])
DT.multirep.probes<-DT_full[, 1:11][duplicated(probeIDs) |
duplicated(probeIDs, fromLast=TRUE)]
as.character(DT.multirep.probes$probeIDs)
unique(as.character(DT.multirep.probes$probeIDs))
multirep_probes<-unique(as.character(DT.multirep.probes$probeIDs))
#When Strand is not ignored: 50 probes overlap at least 2 repeat regions.
#When Strand is ignored: 161 probes overlap at least 2 repeat regions.
#Get Table of these multirep probes
fwrite(x = DT.multirep.probes, file = "data/Multirep_Probes.tsv",sep = "\t",
row.names = FALSE)
dim(DT_full)
DT_full<-DT_full[!probeIDs %in% multirep_probes]
dim(DT_full)
saveRDS(DT_full,"data/DT_FULL_REPEATS_METH_PANCAN.RDS")
DT_out<-DT.meth[!probeIDs %in% c(as.character(DT_full[["probeIDs"]]),multirep_probes)]
saveRDS(DT_out,"data/DT_out_of_repeats.RDS")
df.full<-as.data.frame(DT_full[,-c(1:11), with = FALSE])
rownames(df.full)<-DT_full$regions
mat.full<-as.matrix(df.full)
res_plots<-report.mat.metrics(mat.meth = mat.full, ncores = 7)
res_plots$sunset
res_plots$average_methylation
res_plots$sd_methylation
res_plots$mad_methylation
res_plots$average_methylation
res_plots$sd_methylation
res_plots$mad_methylation
df.out<-as.data.frame(DT_out[,-c("probeIDs","regions"), with = FALSE])
rownames(df.out)<-DT_out$regions
mat.out<-as.matrix(df.out)
res_plots<-report.mat.metrics(mat.meth = mat.out, ncores = 7)
res_plots<-report.mat.metrics(mat.meth = mat.out, ncores = 7)
res_plots$sunset
res_plots$average_methylation
res_plots$sd_methylation
res_plots$mad_methylation
Amount_by_RepFam<-hg19_repeats[, .N, by=repFamily][order(repFamily)][
, .(Family = repFamily, Total.Rep = N)]
Amount_by_RepClass<-hg19_repeats[, .N, by=repClass][order(repClass)][
, .(Class = repClass, Total.Rep = N)]
Amount_meth_RepFam<-unique(
DT_full[,c(1:11), with = FALSE],by="Repeats_Regions")[, .N, by = Family,][
order(Family)][, .(Family, Repeats.Overlapping.Probes = N)]
Amount_meth_RepClass<-unique(
DT_full[,c(1:11), with = FALSE],by="Repeats_Regions")[, .N, by = Class,][
order(Class)][, .(Class, Repeats.Overlapping.Probes = N)]
Class_dframe<-merge(Amount_by_RepClass, Amount_meth_RepClass, by = "Class",
all = TRUE)
Fam_dframe<-merge(Amount_by_RepFam, Amount_meth_RepFam, by = "Family",
all = TRUE)
Amount_by_RepFam
Amount_by_RepClass
Amount_meth_RepFam
unique(
DT_full[,c(1:11), with = FALSE],by="Repeats_Regions")
DT_full[,c(1:11), with = FALSE]
unique(
DT_full[,c(1:11), with = FALSE],by="Repeats_Regions")
unique(
DT_full[,c(1:11), with = FALSE],by="Repeats_Regions")[, .N, by = Family,][
order(Family)][, .(Family, Repeats.Overlapping.Probes = N)]
Amount_meth_RepFam
Class_dframe
Fam_dframe
write.table(Class_dframe, file = "data/Repeat_Classes.tsv",quote = FALSE,
sep="\t",row.names = FALSE)
write.table(Fam_dframe, file = "data/Repeat_Families.tsv",quote = FALSE,
sep="\t",row.names = FALSE)
tbl_class_fam<-unique(hg19_repeats[,c("repClass","repFamily"),])
tbl_class_fam<-tbl_class_fam[,.(Classes = repClass, Family = repFamily),]
Fam_dframe<-merge(tbl_class_fam, Fam_dframe, by = "Family", all.y = TRUE)
Fam_dframe$Classes<-factor(Fam_dframe$Classes,
levels = Class_dframe[order(Total.Rep)]$Class)
Fam_dframe
ggcoverage(data = Fam_dframe[,c(1,3:4,2),], rev.stack = T, invert.percent = T,
log.scaled = T, decreasing.order = T, horizontal = T)
ggcoverage(data = Fam_dframe[,c(1,3:4,2),], rev.stack = T, invert.percent = T,
log.scaled = T, decreasing.order = T, horizontal = T) +
facet_grid(Fam_dframe$Classes ~ ., scales = "free", space = "free_y") +
ggtitle("Proportion of Repeats with known methylated values") +
scale_y_continuous(expand = c(0,0),
limits = c(0,log10(max(Fam_dframe$Total.Rep)) +
0.1 * log10(max(Fam_dframe$Total.Rep)))) +
ylab(label = "Log-scaled Number of Repeats") +
xlab(label = "Families") +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(size = 13, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "bottom",
legend.direction="horizontal",
panel.background = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey"),
panel.grid.minor.x = element_line(color = "grey"),
panel.spacing.y = unit(0.2, "lines"),
strip.text.y = element_text(size = 14,angle = 0),
plot.margin = unit(c(0,0.1,0,0),"cm")) +
scale_fill_manual(values=c("#D6604D","#4393C3"),
label = c("Non-Overlapped Repeats",
"Repeats Overlapping Probes"))+
guides(fill=guide_legend(title="Repeats"))
ggcoverage(data = Fam_dframe[,c(1,3:4,2),], rev.stack = T, invert.percent = T,
log.scaled = T, decreasing.order = T, horizontal = T) +
facet_grid(Fam_dframe$Classes ~ ., scales = "free", space = "free_y") +
ggtitle("Proportion of Repeats with known methylated values") +
scale_y_continuous(expand = c(0,0),
limits = c(0,log10(max(Fam_dframe$Total.Rep)) +
0.1 * log10(max(Fam_dframe$Total.Rep)))) +
ylab(label = "Log-scaled Number of Repeats") +
xlab(label = "Families") +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(size = 13, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "bottom",
legend.direction="horizontal",
panel.background = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey"),
panel.grid.minor.x = element_line(color = "grey"),
panel.spacing.y = unit(0.2, "lines"),
strip.text.y = element_text(size = 14,angle = 0),
plot.margin = unit(c(0,0.1,0,0),"cm")) +
scale_fill_manual(values=c("#D6604D","#4393C3"),
label = c("Non-Overlapped Repeats",
"Repeats Overlapping Probes"))+
guides(fill=guide_legend(title="Repeats"))
Fam_dframe
1/44
log10(1)
log10(19617)
ggcoverage(data = Fam_dframe[,c(1,3:4,2),], rev.stack = T, invert.percent = T,
log.scaled = T, decreasing.order = T, horizontal = T) +
facet_grid(Fam_dframe$Classes ~ ., scales = "free", space = "free_y") +
ggtitle("Proportion of Repeats with known methylated values") +
scale_y_continuous(expand = c(0,0),
limits = c(0,log10(max(Fam_dframe$Total.Rep)) +
0.1 * log10(max(Fam_dframe$Total.Rep)))) +
ylab(label = "Log-scaled Number of Repeats") +
xlab(label = "Families") +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(size = 13, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "bottom",
legend.direction="horizontal",
panel.background = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey"),
panel.grid.minor.x = element_line(color = "grey"),
panel.spacing.y = unit(0.2, "lines"),
strip.text.y = element_text(size = 14,angle = 0),
plot.margin = unit(c(0.1,0.1,0,0.1),"cm")) +
scale_fill_manual(values=c("#D6604D","#4393C3"),
label = c("Non-Overlapped Repeats",
"Repeats Overlapping Probes"))+
guides(fill=guide_legend(title="Repeats"))
ggcoverage(data = Fam_dframe[,c(1,3:4,2),], rev.stack = T, invert.percent = T,
log.scaled = T, decreasing.order = T, horizontal = T) +
facet_grid(Fam_dframe$Classes ~ ., scales = "free", space = "free_y") +
ggtitle("Proportion of Repeats with known methylated values") +
scale_y_continuous(expand = c(0,0),
limits = c(0,log10(max(Fam_dframe$Total.Rep)) +
0.1 * log10(max(Fam_dframe$Total.Rep)))) +
ylab(label = "Log-scaled Number of Repeats") +
xlab(label = "Families") +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(size = 13, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "bottom",
legend.direction="horizontal",
panel.background = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(color = "grey"),
panel.grid.minor.x = element_line(color = "grey"),
panel.spacing.y = unit(0.2, "lines"),
strip.text.y = element_text(size = 14,angle = 0),
plot.margin = unit(c(0.1,0.1,0,0.1),"cm")) +
scale_fill_manual(values=c("#D6604D","#4393C3"),
label = c("Non-Overlapped Repeats",
"Repeats Overlapping Probes"))+
guides(fill=guide_legend(title="Repeats"))
ggcoverage(data = Class_dframe, rev.stack = T, invert.percent = T,
log.scaled = T, decreasing.order = F, horizontal = F) +
ggtitle("Proportion of Repeats with Available Methylated Values") +
scale_y_continuous(expand = c(0,0),
limits = c(0,log10(max(Class_dframe$Total.Rep)) +
0.1 *
log10(max(Class_dframe$Total.Rep)))) +
ylab(label = "Log-scaled Number of Repeats") +
xlab(label = "Classes") +
theme(plot.title = element_text(size = 15, hjust = 0.5),
axis.text.x = element_text(size = 14, color = "black", angle = -45,
hjust = 0),
axis.text.y = element_text(size = 13, color = "black"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.position = "bottom",
legend.direction="horizontal",
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey"),
panel.grid.minor.y = element_line(color = "grey"),
plot.margin = unit(c(0.1,1,0,0.1),"cm")) +
scale_fill_manual(values=c("#D6604D","#4393C3"),
label = c("Non-Overlapped Repeats",
"Repeats Overlapping Probes"))+
guides(fill=guide_legend(title="Repeats"))
DT_out
dim(DT_out)
dim(DT_out[,1])
DT_out[,1]
DT_out[,c(1:3)]
Av.Out.Meth<-DT_out[, lapply(.SD, mean, na.rm=TRUE), .SDcols=c(3:1362)]
Av.Out.Meth
dim(Av.Out.Meth)
dim(Av.Out.Meth[, c(1:10)])
Av.Out.Meth[, c(1:10)]
colnames(DT_out)[1:15]
Av.Out.Meth.perProbes<-DT_out[, .(rowMeans(.SD)), by = "probeIDs", .SDcols=c(3:1362)]
dim(Av.Out.Meth.perProbes)
head(Av.Out.Meth.perProbes)
hist(Av.Out.Meth.perProbes$V1)
hist(Av.Out.Meth.perProbes$V1, breaks = 200)
#Check Patients Average Methylation between probes out of repeats and in repeats
Av.Out.Meth.by.Samples<-DT_out[, lapply(
.SD, mean, na.rm=TRUE), .SDcols=c(3:1362)]
Av.Rep.Meth.by.Samples<-DT_full[, lapply(
.SD, mean, na.rm=TRUE), .SDcols=c(12:1371)]
Av.Out.Meth.by.Samples<-melt(Av.Out.Meth.by.Samples)
Av.Out.Meth.by.Samples$variable<-"Out-repeats Probes"
Av.Rep.Meth.by.Samples<-melt(Av.Rep.Meth.by.Samples)
Av.Rep.Meth.by.Samples$variable<-"Repeats Probes"
dframe<-rbind(Av.Out.Meth.by.Samples,Av.Rep.Meth.by.Samples)
dframe
dframe$variable<-factor(dframe$variable,
levels = dframe$variable[!duplicated(dframe$variable)])
palette<-c(pal_npg("nrc",alpha = 0.9)(10),pal_npg("nrc",alpha = 0.4)(10))
#Craviola plot of the methylation of probes overlapping repeats Vs out repeats
ggcraviola(data = dframe, boxplot.width = 2.5, fill.color = palette[1:2],
lines.col = "black", boxplots = T) +
ylab(label = "beta") +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 13, color = "black"),
axis.title = element_text(size = 14),
legend.title = element_text(size = 13),
legend.text = element_text(size = 11),
legend.position = "bottom",
legend.direction="vertical",
panel.background = element_blank(),
panel.grid.major.x = element_line(color = "white"),
panel.grid.minor.x = element_line(color = "white"),
panel.grid.major.y = element_line(color = "grey"),
panel.grid.minor.y = element_line(color = "grey")) +
scale_y_continuous(expand = c(0,0), limits = c(0.3,0.65))
View(Class_dframe)
shapiro.test(dframe[variable == "Out-repeats Probes"][["value"]])$p.value
# 1.987486e-08
shapiro.test(dframe[variable == "Repeats Probes"][["value"]])$p.value
LeveneTest(dframe$value,dframe$variable)$`Pr(>F)`
wilcox.test(x = dframe[variable == "Out-repeats Probes"]$value,
y = dframe[variable == "Repeats Probes"]$value)$p.value
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
