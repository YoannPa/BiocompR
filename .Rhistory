#Reoder groups and convert as factors
annot.grps <- lapply(X = annot.grps, FUN = function(i){
factor(x = i, levels =  unique(i))})
annot.grps <- lapply(X = annot.grps, FUN = function(i){i[column.order]})
#Create Color Sidebar
col_sidebar<-plot.col.sidebar(
sample.names = colnames(m[, column.order]), annot.grps = annot.grps,
annot.pal = annot.pal, annot.pos = 'top',
cor.order = seq_along(colnames(dframe)), split.annot = annot.split,
merge.lgd = lgd.merge, right = TRUE, lgd.lab = lgd.lab,
axis.text.x = element_blank(),
axis.text.y = element_text(size = 11, color = "black"),
axis.ticks.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
set.x.title = NULL, set.y.title = NULL, dendro.pos = 'top')
#Extract Legend
htmp_legend <- get.lgd(gg2.obj = htmp)
sidebar_legend <- col_sidebar$legends
#Convert ggplots into grobs
ddgr_seg_col <- ggplotGrob(ddgr_seg_col)
col_sidebar_grob <- ggplotGrob(col_sidebar$sidebar)
ddgr_seg_row <- ggplotGrob(ddgr_seg_row)
htmp <- ggplotGrob(htmp + theme(legend.position="none"))
#Resize grobs
upd.grob_w<-resize.grobs(ls.grobs = list(
'dd_col' = ddgr_seg_col, 'sidebar' = col_sidebar_grob, 'htmp' = htmp),
dimensions = "widths", start.unit = 4, end.unit = 7)
upd.grob_h<- resize.grobs(ls.grobs = list(
'dd_row' = ddgr_seg_row, 'htmp' = upd.grob_w$htmp), dimensions = 'heights',
start.unit = 7, end.unit = 9)
#Combine Dendrogram with Color Sidebar and Heatmap
if((length(dendrograms) == 1 & dendrograms) |
(length(dendrograms) == 2 & all(dendrograms == TRUE))){
#Create main grob
main_grob <- arrangeGrob(
grobs = list(textGrob(""), upd.grob_w$dd_col,
textGrob(""), upd.grob_w$sidebar,
upd.grob_h$dd_row, upd.grob_h$htmp),
ncol = 2, nrow = 3, heights = c(3, annot.size, 30), widths = c(2, 10))
#Create the Right Panel for legends
sidebar_legend.grob <- arrangeGrob(
grobs = sidebar_legend, nrow = 4, heights = c(4,1+annot.lgd.space,4,4))
right.legends <- arrangeGrob(
htmp_legend, textGrob(""), sidebar_legend.grob,
layout_matrix = cbind(c(1,1,1,2), c(2,2,2,2), c(3,3,3,3)),
vp = viewport(x= lgd.pos.x-0.6, y = lgd.pos.y))
# right.legends <- arrangeGrob(
#   textGrob(""), textGrob(""), textGrob(""),
#   htmp_legend, textGrob(""), sidebar_legend.grob,
#   textGrob(""), textGrob(""), textGrob(""),
#   ncol = 3, vp = viewport(x = -0.1), widths = c(1,1,1),
#   heights = c(1, 1 + annot.lgd.space, 1 + annot.lgd.space))
#Final plot
grid.arrange(arrangeGrob(
top = textGrob("DMRs in 129 and BL6J WT Vs. 129 Mut DMNT1 HSPCs",
gp = gpar(fontsize = 15, font = 1)),
grobs = list(
textGrob(paste("(Columns ordered by", method.cols,
"distance; Rows ordered by", method.rows, "distance;",
nrow(m), "loci.)"), gp = gpar(fontsize=12, fontface=3L)),
arrangeGrob(grobs = list(main_grob, right.legends), ncol = 2,
widths = c(20,3))),
nrow = 2, heights = c(3,50)))
}
}
library(rray)
install.packages("bigstatsr")
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
library(BiocompR)
df.complete2 = data.frame(
Samples=rep(paste0("Sample",c(1:6)),each = 1000),
Groups=rep(c('A','B','C'),each = 2000),
Conditions=rep(c('I','J'),each = 1000,3),
Values=c(rnorm(1000,0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000,-3), rnorm(1000, -3.5)),
Scnd.Var = rep(rep(x =c(60,50,40,30,20,10,30,40,50,60),
each=100),6))
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE)
ggcraviola(data = df.complete2, lines.col = "black", bins = TRUE) +
labs(alpha = "SD(2nd Variable)") +
ggtitle("This is a Craviola plot!") +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 14, color = "black"),
axis.title = element_text(size = 15),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "grey"),
panel.grid.minor.y = element_line(color = "grey")) +
scale_y_continuous(expand = c(0,0)) +
scale_fill_manual(labels = c("Control","Case"),
values = c("dodgerblue","darkorange"))
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?update.packages
##IMPORTS
setwd("/run/user/1000/gvfs/sftp:host=odcf-worker01/icgc/dkfzlsdf/analysis/G200/pageaud/PhD/Brors_Lab/Pancan_Repeats_Methylation/")
Imports = c("data.table","ggplot2","psych","ggrepel")
lapply(Imports, library, character.only = T)
source("src/ggcorr.R")
##PARAMETERS
active_subfam<-fread("data/Tubio_L1_data/active_subfamilies_PCAWG.tsv")
DT.Full<-readRDS("data/DT_FULL_REPEATS_METH_PANCAN.RDS")
L1_Annotated_Data<-fread("data/Annotations/PCAWG_L1_Retrotransposition/L1_Transposition_Simplified.csv")
##ANALYSIS
#Subset Methylation Matrices with samples matching L1 Transposition
DT.Full<-DT.Full[,c(colnames(DT.Full)[c(1:11)],colnames(DT.Full)[
colnames(DT.Full) %in% L1_Annotated_Data$Matching_HM450_Filenames]),
with=FALSE]
#Get Methylation of Active Repeat Names
active_subfam$subfamily %in% unique(DT.Full$Name) #No methylation for AluYk3
DT_activ<-DT.Full[Name %in% active_subfam$subfamily]
#In Repeats Meth + L1
mean.Rep<-t(DT_activ[, lapply(.SD, mean, na.rm=TRUE), .SDcols=c(12:697)])
sd.Rep<-t(DT_activ[, lapply(.SD, sd, na.rm=TRUE), .SDcols=c(12:697)])
mad.Rep<-t(DT_activ[, lapply(.SD, mad, na.rm=TRUE), .SDcols=c(12:697)])
#By Repeat Classes
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Class), .SDcols=c(12:697)]
mean.Class<-t(res[,-c(1),])
colnames(mean.Class)<-res$Class
#By Repeat Families
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Family), .SDcols=c(12:697)]
mean.Family<-t(res[,-c(1),])
colnames(mean.Family)<-res$Family
#By All Repeat Names
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
mean.Names<-t(res[,-c(1),])
colnames(mean.Names)<-res$Name
#Same but for SD
res<-DT_activ[, lapply(.SD, sd, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
sd.Names<-t(res[,-c(1),])
colnames(sd.Names)<-res$Name
#Same but for MAD
res<-DT_activ[, lapply(.SD, mad, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
mad.Names<-t(res[,-c(1),])
colnames(mad.Names)<-res$Name
colnames(mean.Class)<-paste0("Mean.",colnames(mean.Class),".Class")
colnames(mean.Family)<-paste0("Mean.",colnames(mean.Family),".Fam")
colnames(mean.Names)<-paste0("Mean.",colnames(mean.Names))
colnames(sd.Names)<-paste0("SD.",colnames(sd.Names))
colnames(mad.Names)<-paste0("MAD.",colnames(mad.Names))
tbl_meth<-cbind(Matching_HM450_Filenames=colnames(DT_activ)[12:697],mean.Class, mean.Family, mean.Names, sd.Names, mad.Names) #For active repeats
#Merge L1 Data and Table methylation
L1_Meth.Table<-merge(x = L1_Annotated_Data[,c(
"Matching_HM450_Filenames","Tubio_L1_Transposition_Version3"),], y = tbl_meth,
by = "Matching_HM450_Filenames", all.x = TRUE)
#Search for columns having all values to NAs
col.onlyNAs<-apply(
X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2, FUN = all)
# #Search for columns having any NAs and remove them
# colNAs<-apply(X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2,
#               FUN = any)
#Search for columns having a variance (SD) of 0
col.var.zero<-apply(X=L1_Meth.Table, MARGIN=2, FUN=sd, na.rm = TRUE)
col.var.zero<-names(col.var.zero[!(is.na(col.var.zero)) & col.var.zero == 0])
#Convert to numeric
filenames<-L1_Meth.Table$Matching_HM450_Filenames
L1_Meth.Table<-apply(X = L1_Meth.Table, MARGIN = 2, FUN = as.numeric)
L1_Meth.Table<-as.data.table(L1_Meth.Table)
L1_Meth.Table$Matching_HM450_Filenames<-filenames
#Compute Spearman correlation tests of transposition count VS methylation variables
spearman.cor.res<-apply(X = L1_Meth.Table[,-c(
colnames(L1_Meth.Table)[c(1,2)], names(col.onlyNAs[col.onlyNAs==TRUE])),
with=FALSE], MARGIN = 2, FUN = corr.test, y = unlist(L1_Meth.Table[,c(2),]),
method = "spearman", use = "pairwise.complete.obs")
spearman.cor.res[[1]]
typeof(spearman.cor.res[[1]])
test<-spearman.cor.res[[1]]
ls.psych.as.dt<-function(psych.list){
dt<-rbindlist(l = lapply(X = psych.list, FUN = function(i){
data.table(
cor = i[["r"]], pvalue = i[["p"]], nsample = i[["n"]], stderr = i[["se"]])
}), use.names = TRUE, fill = TRUE)
dt<-cbind(var.name = names(psych.list),dt)
return(dt)
}
#Get top correlated and anti-correlated Classes
spearman.cor.res.class<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[1:3]])[order(cor)]
#Adjust p-values for multiple testing using the Holm method
spearman.cor.res.class[, pvalue:=p.adjust(pvalue, method = "holm")]
#Get top correlated and anti-correlated Families
spearman.cor.res.fam<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[4:6]])[order(cor)]
#Adjust p-values for multiple testing using the Holm method
spearman.cor.res.fam[, pvalue:=p.adjust(pvalue, method = "holm")]
#Get top correlated and anti-correlated Names
spearman.cor.res.name<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[7:45]])[order(cor)][!is.na(cor)]
#Adjust p-values for multiple testing using the Holm method
spearman.cor.res.name[, pvalue:=p.adjust(pvalue, method = "holm")]
spearman.cor.res.name
##IMPORTS
setwd("/run/user/1000/gvfs/sftp:host=odcf-worker01/icgc/dkfzlsdf/analysis/G200/pageaud/PhD/Brors_Lab/Pancan_Repeats_Methylation/")
Imports = c("data.table","ggplot2","psych","ggrepel")
lapply(Imports, library, character.only = T)
source("src/core_stat_tests.R")
source("src/ggcorr.R")
##PARAMETERS
active_subfam<-fread("data/Tubio_L1_data/active_subfamilies_PCAWG.tsv")
DT.Full<-readRDS("data/DT_FULL_REPEATS_METH_PANCAN.RDS")
L1_Annotated_Data<-fread("data/Annotations/PCAWG_L1_Retrotransposition/L1_Transposition_Simplified.csv")
##ANALYSIS
#Subset Methylation Matrices with samples matching L1 Transposition
DT.Full<-DT.Full[,c(colnames(DT.Full)[c(1:11)],colnames(DT.Full)[
colnames(DT.Full) %in% L1_Annotated_Data$Matching_HM450_Filenames]),
with=FALSE]
#Get Methylation of Active Repeat Names
active_subfam$subfamily %in% unique(DT.Full$Name) #No methylation for AluYk3
DT_activ<-DT.Full[Name %in% active_subfam$subfamily]
#In Repeats Meth + L1
mean.Rep<-t(DT_activ[, lapply(.SD, mean, na.rm=TRUE), .SDcols=c(12:697)])
sd.Rep<-t(DT_activ[, lapply(.SD, sd, na.rm=TRUE), .SDcols=c(12:697)])
mad.Rep<-t(DT_activ[, lapply(.SD, mad, na.rm=TRUE), .SDcols=c(12:697)])
#By Repeat Classes
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Class), .SDcols=c(12:697)]
mean.Class<-t(res[,-c(1),])
colnames(mean.Class)<-res$Class
#By Repeat Families
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Family), .SDcols=c(12:697)]
mean.Family<-t(res[,-c(1),])
colnames(mean.Family)<-res$Family
#By All Repeat Names
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
mean.Names<-t(res[,-c(1),])
colnames(mean.Names)<-res$Name
#Same but for SD
res<-DT_activ[, lapply(.SD, sd, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
sd.Names<-t(res[,-c(1),])
colnames(sd.Names)<-res$Name
#Same but for MAD
res<-DT_activ[, lapply(.SD, mad, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
mad.Names<-t(res[,-c(1),])
colnames(mad.Names)<-res$Name
colnames(mean.Class)<-paste0("Mean.",colnames(mean.Class),".Class")
colnames(mean.Family)<-paste0("Mean.",colnames(mean.Family),".Fam")
colnames(mean.Names)<-paste0("Mean.",colnames(mean.Names))
colnames(sd.Names)<-paste0("SD.",colnames(sd.Names))
colnames(mad.Names)<-paste0("MAD.",colnames(mad.Names))
tbl_meth<-cbind(Matching_HM450_Filenames=colnames(DT_activ)[12:697],mean.Class, mean.Family, mean.Names, sd.Names, mad.Names) #For active repeats
#Merge L1 Data and Table methylation
L1_Meth.Table<-merge(x = L1_Annotated_Data[,c(
"Matching_HM450_Filenames","Tubio_L1_Transposition_Version3"),], y = tbl_meth,
by = "Matching_HM450_Filenames", all.x = TRUE)
#Search for columns having all values to NAs
col.onlyNAs<-apply(
X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2, FUN = all)
# #Search for columns having any NAs and remove them
# colNAs<-apply(X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2,
#               FUN = any)
#Search for columns having a variance (SD) of 0
col.var.zero<-apply(X=L1_Meth.Table, MARGIN=2, FUN=sd, na.rm = TRUE)
col.var.zero<-names(col.var.zero[!(is.na(col.var.zero)) & col.var.zero == 0])
#Convert to numeric
filenames<-L1_Meth.Table$Matching_HM450_Filenames
L1_Meth.Table<-apply(X = L1_Meth.Table, MARGIN = 2, FUN = as.numeric)
L1_Meth.Table<-as.data.table(L1_Meth.Table)
L1_Meth.Table$Matching_HM450_Filenames<-filenames
#Compute Spearman correlation tests of transposition count VS methylation variables
spearman.cor.res<-apply(X = L1_Meth.Table[,-c(
colnames(L1_Meth.Table)[c(1,2)], names(col.onlyNAs[col.onlyNAs==TRUE])),
with=FALSE], MARGIN = 2, FUN = corr.test, y = unlist(L1_Meth.Table[,c(2),]),
method = "spearman", use = "pairwise.complete.obs")
spearman.cor.res.class<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[1:3]])[order(cor)]
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
make_warnings <- function()
{
warning("This is a warning that can be ignored")
warning("This is a warning that shouldn't be ignored")
return(0)
}
make_warnings()
warn.handle <- function(warning, regex="can be ignored"){
condition <- conditionMessage(warning)
if(grepl(pattern = regex, x = condition)) invokeRestart("muffleWarning")
}
withCallingHandlers(expr = make_warnings(), warning = warn.handle)
make_warnings <- function()
{
warning("This is a warning that can be ignored")
# warning("This is a warning that shouldn't be ignored")
# return(0)
}
withCallingHandlers(expr = make_warnings(), warning = warn.handle)
a <- 1:3; a[] <- as.numeric(c("A", "1"))
withCallingHandlers(expr = make_warnings(), warning = warn.handle(regex = "toto"))
warn.handle <- function(warning, regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
make_warnings <- function()
{
warning("This is a warning that can be ignored")
warning("This is a warning that shouldn't be ignored")
# return(0)
}
warn.handle <- function(warning, regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(warning = make_warnings(), regex = "can be ignored")
warn.handle <- function(warning, regex, ...){
withCallingHandlers(expr = regex, warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(warning = make_warnings(), regex = "can be ignored")
make_warnings <- function()
{
warning("This is a warning that can be ignored")
warning("This is a warning that shouldn't be ignored")
# return(0)
}
warning = make_warnings()
regex = "can be ignored"
withCallingHandlers(expr = regex, warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
with_warning_handler <- function(reg, ...)
{
withCallingHandlers(..., warning = function(w)
{
condition <- conditionMessage(w)
if(grepl(reg, condition)) invokeRestart("muffleWarning")
})
}
with_warning_handler(reg = "can be ignored", make_warnings())
with_warning_handler <- function(reg, ...){
withCallingHandlers(..., warning = function(w){
condition <- conditionMessage(w)
if(grepl(reg, condition)){ invokeRestart("muffleWarning")}
})
}
with_warning_handler(reg = "can be ignored", make_warnings())
warn.handle <- function(regex, ...){
withCallingHandlers(expr = regex, warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(warning = make_warnings(), regex = "can be ignored")
warn.handle <- function(regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", make_warnings())
warn.handle <- function(regex, warning, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", warning = make_warnings())
warn.handle <- function(regex, warning, ...){
withCallingHandlers(expr = regex, ..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", warning = make_warnings())
warn.handle <- function(regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", warning = make_warnings())
warn.handle <- function(regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", make_warnings())
warn.handle("coercion", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
warn.handle(regex = "can be ignored", make_warnings())
warn.handle(regex = "coercion", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
with_warning_handler <- function(reg, ...)
{
withCallingHandlers(..., warning = function(w)
{
condition <- conditionMessage(w)
if(grepl(reg, condition)) invokeRestart("muffleWarning")
})
}
with_warning_handler("coercion", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
a <- 1:3; a[] <- as.numeric(c("A", "1"))
warn.handle(regex = "conversion automatique ", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
warn.handle(regex = "conversion automatique", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
?grep
?warning
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
detach("package:BiocompR", unload = TRUE)
library(BiocompR)
detach("package:BiocompR", unload = TRUE)
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
??na.remplace
??na.replace
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
