devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("IRanges")
devtools::install()
install.packages("Hmisc")
devtools::install()
df.minimal = data.frame(
Samples = rep(paste0("Sample",c(1:2)),each = 1000),
Values=c(rnorm(1000,0), rnorm(1000, 0.5)))
ggcraviola(data = df.minimal, lines.col = "black")
library(BiocompR)
df.minimal = data.frame(
Samples = rep(paste0("Sample",c(1:2)),each = 1000),
Values=c(rnorm(1000,0), rnorm(1000, 0.5)))
ggcraviola(data = df.minimal, lines.col = "black")
ggcraviola
inst.pkgs = c("data.table","TCGAbiolinks","simsalapar")
install.packages(inst.pkgs)
install.packages(pkgs = c("devtools", "data.table"))
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, nbreaks = 9)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, nbreaks = 11)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, ngrad = 11)
fancy.hist(x = rnorm(100, 5, 1), xmax = 15, ngrad = 11)
fancy.hist(x = rnorm(100, 5, 1), xmax = 50, ngrad = 11)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 10, ngrad = 11)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, ngrad = 11)
rnorm(1000, 5, 1)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, ngrad = 11, nbreaks = 11)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 10, ngrad = 11, nbreaks = 11)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 5, ngrad = 11, nbreaks = 11)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 10, ngrad = 11, nbreaks = 11)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, ngrad = 11, nbreaks = 11)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
test <- fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
test
test + labs(x = "test")
test + labs(x = "test", y = "ytest")
my.hist <- fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
my.hist + labs(x = "Distribution of the values", y = "Number of values in each bin")
my.hist + scale_fill_manual(values = "darkorange")
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, bin.col = "red")
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, bin.col = "green")
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, bin.col = "orange")
fancy.hist(x = rnorm(100, 5, 1))
max(rnorm(100, 5, 1), na.rm = TRUE)
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, bin.col = "orange")
fancy.hist(x = rnorm(100, 5, 1), xmax = 10) +
labs(x = "Distribution of the values", y = "Number of values in each bin")
fancy.hist(x = rnorm(100, 5, 1), xmax = 10) +
labs(x = "Distribution of the values", y = "Number of values in each bin")
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
x = rnorm(100, 5, 1)
any(is.na(x))
seq(0, xmax, length.out = nbreaks)
nbreaks = 11
seq(0, xmax, length.out = nbreaks)
max(x, na.rm = TRUE)
seq(0, xmax, length.out = nbreaks)
xmax = max(x, na.rm = TRUE)
seq(0, xmax, length.out = nbreaks)
xbreaks <- seq(0, xmax, length.out = nbreaks)
#Set graduations
xgrads <- round(x = seq(0, xmax, length.out = ngrad), digits = round.grad)
ngrad = 11
round.grad = 1
xgrads <- round(x = seq(0, xmax, length.out = ngrad), digits = round.grad)
xgrads
xlabs <- as.character(xgrads)
max(x) > xmax
histdata <- lapply(X = seq(length(xbreaks)-1), FUN = function(i){
if(i == length(xbreaks)-1){ #If last bin take values equal to maximum too
qs<-length(x[x >= xbreaks[i] & x <= xbreaks[i+1]])
} else { qs<-length(x[x >= xbreaks[i] & x < xbreaks[i+1]]) }
})
histdata
histdata<-unlist(histdata)
#Get recommended cut-off value and median
cat("Compute Median and Cutoff\n")
cutoff.val <- quantmod::findValleys(histdata)[1]
cutoff.pos <-cutoff.val*(length(histdata)/xmax) + 0.5
median.val<-median(x,na.rm = TRUE)
median.pos<-median.val*(length(histdata)/xmax) + 0.5
histbreaks<-xgrads*(length(histdata)/xmax) + 0.5 #Scale graduations
dframe<-data.frame(x= seq(histdata), y=histdata) #Create dataframe
#Plot
cat("Plotting\n")
gghist<-ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width=1, fill = bin.col, alpha = 0.7) +
scale_x_continuous(breaks = histbreaks, labels = xlabs,
limits = c(histbreaks[1],histbreaks[length(histbreaks)]),
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_vline(xintercept = median.pos, color = "#313695", size = 0.7) +
ggrepel::geom_label_repel(
data = data.frame(), aes(x = median.pos, y = Inf, fontface = 2,
label = paste0("median = ", round(x = median.val,
digits = 2))),
vjust = 1.1, color = "#313695") +
labs(x = "Values", y = "Frequency") +
theme(plot.margin = unit(c(0.1,1,0.1,0.1),"cm"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_line(colour = "grey"),
panel.background = element_rect(fill = "white"))
bin.col = "#0570b0"
#Check if is any NAs
if(any(is.na(x))){ x<-x[!is.na(x)] } #rm NAs
#Set breaks
xbreaks <- seq(0, xmax, length.out = nbreaks)
#Set graduations
xgrads <- round(x = seq(0, xmax, length.out = ngrad), digits = round.grad)
#Set X axis labels
xlabs <- as.character(xgrads)
if(max(x) > xmax){
#Set Maximum
x[x > xmax] <- xmax
xlabs[length(xlabs)]<-paste(xlabs[length(xlabs)],"\nor more")
}
#Compute quantities for each bin
histdata <- lapply(X = seq(length(xbreaks)-1), FUN = function(i){
if(i == length(xbreaks)-1){ #If last bin take values equal to maximum too
qs<-length(x[x >= xbreaks[i] & x <= xbreaks[i+1]])
} else { qs<-length(x[x >= xbreaks[i] & x < xbreaks[i+1]]) }
})
histdata<-unlist(histdata)
#Get recommended cut-off value and median
cat("Compute Median and Cutoff\n")
cutoff.val <- quantmod::findValleys(histdata)[1]
cutoff.pos <-cutoff.val*(length(histdata)/xmax) + 0.5
median.val<-median(x,na.rm = TRUE)
median.pos<-median.val*(length(histdata)/xmax) + 0.5
histbreaks<-xgrads*(length(histdata)/xmax) + 0.5 #Scale graduations
dframe<-data.frame(x= seq(histdata), y=histdata) #Create dataframe
#Plot
cat("Plotting\n")
gghist<-ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width=1, fill = bin.col, alpha = 0.7) +
scale_x_continuous(breaks = histbreaks, labels = xlabs,
limits = c(histbreaks[1],histbreaks[length(histbreaks)]),
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_vline(xintercept = median.pos, color = "#313695", size = 0.7) +
ggrepel::geom_label_repel(
data = data.frame(), aes(x = median.pos, y = Inf, fontface = 2,
label = paste0("median = ", round(x = median.val,
digits = 2))),
vjust = 1.1, color = "#313695") +
labs(x = "Values", y = "Frequency") +
theme(plot.margin = unit(c(0.1,1,0.1,0.1),"cm"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_line(colour = "grey"),
panel.background = element_rect(fill = "white"))
#If recommended cut-off inferior or equal to median, plot cut-off
if(cutoff.val <= median.val){
gghist<-gghist +
geom_vline(xintercept=cutoff.pos, color="#d7191c", size=0.7) +
ggrepel::geom_label_repel(
data = data.frame(),
aes(x = cutoff.pos, y = Inf, fontface = 2,
label = paste0("cut-off = ", round(x = cutoff.val, digits = 2))),
vjust = 2.4,color = "#d7191c")
}
gghist
dframe
ggplot(data = dframe, aes(x = x, y = y))
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width=1, fill = bin.col, alpha = 0.7)
gghist
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width=1, fill = bin.col, alpha = 0.7) +
scale_x_continuous(breaks = histbreaks, labels = xlabs,
limits = c(histbreaks[1],histbreaks[length(histbreaks)]),
expand = c(0, 0))
histbreaks
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width = 1, fill = bin.col, alpha = 0.7)
length(histdata)
length(histdata)/xmax
xgrads*(length(histdata)/xmax)
xgrads
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
x = rnorm(100, 5, 1)
xmax = max(x, na.rm = TRUE) + 0.5
nbreaks = 11
ngrad = 11
round.grad = 1
bin.col = "#0570b0"
if(any(is.na(x))){ x<-x[!is.na(x)] } #rm NAs
#Set breaks
xbreaks <- seq(0, xmax, length.out = nbreaks)
#Set graduations
xgrads <- round(x = seq(0, xmax, length.out = ngrad), digits = round.grad)
#Set X axis labels
xlabs <- as.character(xgrads)
if(max(x) > xmax){
#Set Maximum
x[x > xmax] <- xmax
xlabs[length(xlabs)] <- paste(xlabs[length(xlabs)], "\nor more")
}
#Compute quantities for each bin
histdata <- lapply(X = seq(length(xbreaks)-1), FUN = function(i){
if(i == length(xbreaks)-1){ #If last bin take values equal to maximum too
qs<-length(x[x >= xbreaks[i] & x <= xbreaks[i+1]])
} else { qs <- length(x[x >= xbreaks[i] & x < xbreaks[i+1]]) }
})
histdata<-unlist(histdata)
#Get recommended cut-off value and median
cat("Compute Median and Cutoff\n")
cutoff.val <- quantmod::findValleys(histdata)[1]
cutoff.pos <- cutoff.val*(length(histdata)/xmax) + 0.5
median.val <- median(x,na.rm = TRUE)
median.pos <- median.val*(length(histdata)/xmax) + 0.5
histbreaks <- xgrads*(length(histdata)/xmax) + 0.5 #Scale graduations
dframe <- data.frame(x = seq(histdata), y = histdata) #Create dataframe
#Plot
cat("Plotting\n")
gghist <- ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width = 1, fill = bin.col, alpha = 0.7) +
scale_x_continuous(
breaks = histbreaks, labels = xlabs,
limits = c(histbreaks[1], histbreaks[length(histbreaks)]),
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
geom_vline(xintercept = median.pos, color = "#313695", size = 0.7) +
ggrepel::geom_label_repel(
data = data.frame(), aes(x = median.pos, y = Inf, fontface = 2,
label = paste0("median = ", round(x = median.val,
digits = 2))),
vjust = 1.1, color = "#313695") +
labs(x = "Values", y = "Frequency") +
theme(plot.margin = unit(c(0.1,1,0.1,0.1),"cm"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 11),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_line(colour = "grey"),
panel.background = element_rect(fill = "white"))
#If recommended cut-off inferior or equal to median, plot cut-off
if(cutoff.val <= median.val){
gghist<-gghist +
geom_vline(xintercept=cutoff.pos, color="#d7191c", size=0.7) +
ggrepel::geom_label_repel(
data = data.frame(),
aes(x = cutoff.pos, y = Inf, fontface = 2,
label = paste0("cut-off = ", round(x = cutoff.val, digits = 2))),
vjust = 2.4,color = "#d7191c")
}
gghist
length(histdata)
histdata
xmax
xgrads*(length(histdata)/xmax)
xgrads*(length(histdata)/xmax) + 0.5
dframe
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width = 1, fill = bin.col, alpha = 0.7)
histbreaks
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width = 1, fill = bin.col, alpha = 0.7) +
scale_x_continuous(
breaks = histbreaks, labels = xlabs,
limits = c(histbreaks[1], histbreaks[length(histbreaks)]),
expand = c(0, 0))
histbreaks
xlabs
length(histbreaks)
length(xlabs)
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width = 1, fill = bin.col, alpha = 0.7) +
scale_x_continuous(
breaks = histbreaks, labels = xlabs,
# limits = c(histbreaks[1], histbreaks[length(histbreaks)]),
expand = c(0, 0))
xmax
histbreaks[1]
ggplot(data = dframe, aes(x = x, y = y)) +
geom_bar(stat = "identity", width = 1, fill = bin.col, alpha = 0.7)
histbreaks[length(histbreaks)]
xmax
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 10)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 5)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 4)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 3)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 8)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9.5)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9.5)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9.5)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 12)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 12)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 12)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 12)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 12)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 12)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 11)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 10)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
fancy.hist(x = rnorm(1000, 5, 1), xmax = 9)
length(histdata)
length(histdata)/xmax
histdata
gghist
histbreaks
xmax
xgrads
xgrads
xmax
seq(0, xmax, length.out = ngrad)
seq(0, xmax, length.out = ngrad)*(length(histdata)/xmax) + 0.5
seq(0, xmax, length.out = ngrad)
length(histdata)
histdata
length(histdata)/xmax
seq(0, xmax, length.out = ngrad)*(length(histdata)/xmax) + 0.5
c(histlim[1], rev(histlim)[1])
histlim <- seq(0, xmax, length.out = ngrad)*(length(histdata)/xmax) + 0.5
c(histlim[1], rev(histlim)[1])
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), xmax = 10)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1), xmax = 9)
fancy.hist(x = rnorm(100, 5, 1), xmax = 8)
fancy.hist(x = rnorm(100, 5, 1), xmax = 8)
fancy.hist(x = rnorm(100, 5, 1), xmax = 8)
fancy.hist(x = rnorm(100, 5, 1), xmax = 8)
fancy.hist(x = rnorm(100, 5, 1), xmax = 8)
fancy.hist(x = rnorm(100, 5, 1), xmax = 9)
fancy.hist(x = rnorm(100, 5, 1), xmax = 9)
fancy.hist(x = rnorm(100, 5, 1), xmax = 9)
fancy.hist(x = rnorm(100, 5, 1), xmax = 9)
fancy.hist(x = rnorm(100, 5, 1), xmax = 9)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1), xmax = 7)
fancy.hist(x = rnorm(100, 5, 1), xmax = 7)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1), xmax = 10, bin.col = "orange")
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange")
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange")
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1), show.annot = TRUE)
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1), show.annot = TRUE)
devtools::document()
devtools::install()
fancy.hist(x = rnorm(100, 5, 1), show.annot = TRUE)
fancy.hist(x = rnorm(100, 5, 1), show.annot = TRUE)
devtools::document()
devtools::install()
fancy.hist(x = rnorm(100, 5, 1), show.annot = TRUE)
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1), xmax = 7)
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange")
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange", show.annot = TRUE)
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange", show.annot = TRUE)
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange", show.annot = TRUE) + geom_label(size = 10)
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange", show.annot = TRUE) + geom_text(size = 10)
devtools::document()
devtools::install()
library(BiocompR)
fancy.hist(x = rnorm(100, 5, 1))
fancy.hist(x = rnorm(100, 5, 1), xmax = 7)
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange")
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, bin.col = "orange", show.annot = TRUE)
fancy.hist(x = rnorm(100, 5, 1), xmax = 7)
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, ngrad = 8)
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, ngrad = 8, nbreaks = 8)
devtools::document()
devtools::install()
# Basic use of fancy.hist()
fancy.hist(x = rnorm(100, 5, 1))
# Set a specific maximum limit on the X-axis to agregate values above it in a
# single bin.
fancy.hist(x = rnorm(100, 5, 1), xmax = 7)
# Change the number of graduations on X-axis
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, ngrad = 8)
# Change the number of histogram bins
fancy.hist(x = rnorm(100, 5, 1), xmax = 7, ngrad = 8, nbreaks = 8)
# Change filling color of the histogram
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, ngrad = 8, nbreaks = 8, bin.col = "orange")
# Display annotations
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, ngrad = 8, nbreaks = 8, bin.col = "orange",
show.annot = TRUE)
# Rename X-axis and Y-axis titles
fancy.hist(
x = rnorm(100, 5, 1), xmax = 7, ngrad = 8, nbreaks = 8, bin.col = "orange",
show.annot = TRUE) +
labs(x = "Distribution of the values", y = "Number of values in each bin")
