if(!is.null(facet)){
if(verbose){ cat("Facet rasterization:\n") }
ls.rasters <- lapply(
X = levels(melted_mat$facet.annot), FUN = function(i){
if(verbose){ cat(paste("\t", i, "\n")) }
#Create sub DT
sub.melted <- melted_mat[facet.annot == i]
#Create sub heatmap and remove all customization
sub.htmp <- ggplot() +
geom_tile(data = sub.melted,
aes(x = variable, y = rn, fill = value, color = " ")) +
scale_fill_gradientn(colours = heatmap.pal, na.value = na.col) +
scale_color_manual(values = NA) +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
guides(fill = guide_colorbar(
ticks = TRUE, label = TRUE, barwidth = 15, ticks.linewidth = 1,
title.vjust = 0.86, order = 1)) +
guides(color = guide_legend(
"NA", override.aes = list(fill = na.col), title.vjust = 0.5,
order = 2)) +
labs(x = x.lab, y = y.lab, fill = lgd.scale.name) + theme_empty +
theme(legend.position = "none")
rm(sub.melted)
#Rasterize ggplot into a grob
raster.grob <- raster.ggplot.to.grob(
gg.plot = sub.htmp, filter = raster)
rm(sub.htmp)
#Make grob annotation
raster.annot <- annotation_custom2(
grob = raster.grob, xmin = -Inf, xmax = Inf, ymin = -Inf,
ymax = Inf, data = melted_mat[facet.annot == i])
rm(raster.grob)
return(raster.annot)
})
#Fit the list of raster grobs into a ggplot
htmp <- ggplot(
data = melted_mat, aes(x = variable, y = rn, fill = value)) +
geom_blank() + theme_heatmap + theme(legend.position = "none") +
labs(x = x.lab, y = y.lab) +
facet_grid(. ~ facet.annot, scales = "free", space = "free") +
theme(
panel.spacing = unit(0, "lines"),
strip.background = element_blank(), strip.text = element_blank()) +
ls.rasters
} else {
#Remove all customization
htmp <- htmp + theme_empty
#Catch heatmap in magick::image_graph()
raster.annot <- raster.ggplot.to.grob(gg.plot = htmp, filter = raster)
# fig <- magick::image_graph(width = 2160, height = 2160, res = 96)
# print(htmp)
# dev.off()
# rastered <- magick::image_resize(
#   image = fig, geometry = "1080x1080", filter = raster)
# #Create raster grob
# raster.grob <- grid::rasterGrob(
#   rastered, width = unit(1, "npc"), height = unit(1, "npc"),
#   interpolate = TRUE)
#Make grob annotation
raster.annot <- ggplot2::annotation_custom(
raster.grob, -Inf, Inf, -Inf, Inf)
#Fit the raster grob into a ggplot
htmp <- ggplot(
data = melted_mat, aes(x = variable, y = rn, fill = value)) +
geom_blank() + raster.annot + theme_heatmap +
theme(legend.position = "none") + labs(x = x.lab, y = y.lab)
}
} else { stop("Rasterization filter not supported.") }
if(verbose){ cat("Done.\n") }
}
if(verbose){ cat("Converting ggplot into grid object...") }
htmp <- ggplotGrob(x = htmp)
if(verbose){ cat("Done.\n") }
#Resize grobs widths
if(verbose){ cat("Redimensioning grobs...") }
if(dd.cols & dd.rows){
ls.w.grobs <- list(
'dd_col' = ddgr_seg_col, 'sidebar' = col_sidebar_grob, 'htmp' = htmp)
upd.grob_w <- resize.grobs(ls.grobs = ls.w.grobs, dimensions = "widths",
start.unit = 4, end.unit = 7)
rm(ddgr_seg_col)
} else if(dd.cols & !dd.rows){
ls.w.grobs <- list(
'dd_col' = ddgr_seg_col, 'sidebar' = col_sidebar_grob, 'htmp' = htmp)
upd.grob_w <- resize.grobs(ls.grobs = ls.w.grobs, dimensions = "widths",
start.unit = 3, end.unit = 7)
rm(ddgr_seg_col)
} else {
ls.w.grobs <- list('sidebar' = col_sidebar_grob, 'htmp' = htmp)
if(is.null(facet)){
upd.grob_w <- resize.grobs(ls.grobs = ls.w.grobs, dimensions = "widths",
start.unit = 3, end.unit = 7)
} else {
upd.grob_w <- resize.grobs(ls.grobs = ls.w.grobs, dimensions = "widths",
start.unit = 1, end.unit = 55)
}
}
rm(htmp, col_sidebar_grob)
#Resize grobs heights
if(dd.rows){
ls.h.grobs <- list('dd_row' = ddgr_seg_row, 'htmp' = upd.grob_w$htmp)
upd.grob_h <- resize.grobs(ls.grobs = ls.h.grobs, dimensions = 'heights',
start.unit = 7, end.unit = 9)
rm(ddgr_seg_row)
} else { upd.grob_h <- list("htmp" = upd.grob_w$htmp) }
if(verbose){ cat("Done.\n") }
#Create the Right Panel for legends
if(verbose){ cat("Stacking legends...") }
right.legends <- stack.grobs.legends(
grobs.list = sidebar_legend, annot.grps = annot.grps,
height.lgds.space = 29)
rm(sidebar_legend)
if(verbose){ cat("Done.\n") }
#Combine Dendrogram with Color Sidebar and Heatmap
if(verbose){ cat("Creating final plot...") }
if(dd.rows & dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(
grobs = list(grid::textGrob(""), upd.grob_w$dd_col,
grid::textGrob(""), upd.grob_w$sidebar,
upd.grob_h$dd_row, upd.grob_h$htmp),
ncol = 2, nrow = 3, heights = c(dend.col.size + 2, annot.size, 30),
widths = c(dend.row.size + 1, 10))
#Set default legend width space
def.lgd.width <- 2
} else if(!dd.rows & !dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(grobs = list(
upd.grob_w$sidebar, upd.grob_h$htmp), ncol = 1, nrow = 2,
heights = c(annot.size, 30), widths = 10)
#Set default legend width space
def.lgd.width <- 1
} else if(dd.rows & !dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(grobs = list(
grid::textGrob(""), upd.grob_w$sidebar, upd.grob_h$dd_row,
upd.grob_h$htmp), ncol = 2, nrow = 2, heights = c(annot.size, 30),
widths = c(dend.row.size + 1, 10))
#Set default legend width space
def.lgd.width <- 2
} else if(!dd.rows & dd.cols){
#Create main grob
main_grob <- gridExtra::arrangeGrob(grobs = list(
upd.grob_w$dd_col, upd.grob_w$sidebar, upd.grob_h$htmp), ncol = 1,
nrow = 3, heights = c(dend.col.size + 2, annot.size, 30), widths = 10)
#Set default legend width space
def.lgd.width <- 1
}
#rm(upd.grob_w, upd.grob_h)
#Final plot
final.plot <- gridExtra::grid.arrange(gridExtra::arrangeGrob(
top = grid::textGrob(
plot.title, gp = grid::gpar(fontsize = 15, font = 1)),
grobs = list(grid::textGrob(paste0(
"Columns ordered by ", method.cols, " distance; Rows ordered by ",
method.rows, " distance; ", nrow(dframe), " ", row.type, "."),
gp = grid::gpar(fontsize = 12, fontface = 3L)),
gridExtra::arrangeGrob(grobs = list(main_grob, right.legends), ncol = 2,
widths = c(20, def.lgd.width + lgd.space.width)),
htmp_legend), nrow = 3, heights = c(3, 50, 6)))
rm(main_grob)
#Prepare results
ls.res <- list(
"result.grob" = final.plot, "heatmap.grob" = upd.grob_h$htmp,
"sidebar.grob" = upd.grob_w$sidebar, "legends.grob" = right.legends)
rm(final.plot, right.legends)
if(dd.cols){ ls.res[["cols.dendrogram.grob"]] <- upd.grob_w$dd_col }
if(dd.rows){ ls.res[["rows.dendrogram.grob"]] <- upd.grob_h$dd_row }
rm(upd.grob_w, upd.grob_h)
if(verbose){ cat("Done.\n") }
#Return the gtable of the heatmap
return(ls.res)
}
test <- gg2heatmap(
m = miss.sesame.cg.beta.mat, na.handle = "keep", rank.fun = "sd",
top.rows = 15, ncores = 13, dist.method = c("euclidean", "none"),
dendrograms = c(TRUE, FALSE),
lgd.space.width = 2, annot.grps = list("Chromosomes" = chromosomes),
annot.pal = rainbow(n = 24), annot.size = 3, axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.title.y.left = element_text(size = 12),
plot.title = "PCAWG missing methylation data distribution",
row.type = "HM450K PCAWG samples", x.lab = "CG probes", y.lab = "Samples",
lgd.scale.name = "Methylation", facet = "Chromosomes", verbose = TRUE)
test$heatmap.grob
grid.arrange(test$heatmap.grob)
na.count <- colSums(is.na(miss.sesame.cg.beta.mat))
#Map na.count to cg probes
na.distrib <- rep(x = colnames(miss.sesame.cg.beta.mat), times = na.count)
# na.distrib <- rep(x = seq(ncol(miss.sesame.cg.beta.mat)), times = na.count)
na.hist_by_chr <- fancy.hist(
x = na.distrib, nbreaks = 1001, ncores = 5, facet = chromosomes)
na.hist_by_chr
na.hist_by_chr + theme(
panel.border = element_rect(colour = "black", fill = NA),
strip.background = element_rect(color = "black"),
panel.spacing = unit(0, "lines")) +
labs(x = "Distribution of missing methylation along PCAWG genomes",
y = "Number of missing values by bins of CG probes")
na.hist.res <- na.hist_by_chr + theme(
panel.border = element_rect(colour = "black", fill = NA),
strip.background = element_rect(color = "black"),
panel.spacing = unit(0, "lines")) +
labs(x = "Distribution of missing methylation along PCAWG genomes",
y = "Number of missing values by bins of CG probes")
arrangeGrob(grobs = list(na.hist.res, test$heatmap.grob), ncol = 1, nrow = 2,
heights = c(2, 30))
grid.arrange(grobs = list(na.hist.res, test$heatmap.grob), ncol = 1, nrow = 2,
heights = c(2, 30))
grid.arrange(grobs = list(na.hist.res, test$heatmap.grob), ncol = 1, nrow = 2,
heights = c(10, 30))
na.hist.res <- na.hist_by_chr + theme(
panel.border = element_rect(colour = "black", fill = NA),
strip.background = element_rect(color = "black"),
panel.spacing = unit(0, "lines"),
axis.title.x = element_blank()) +
labs(x = "Distribution of missing methylation along PCAWG genomes",
y = "Missing data")
na.hist.res
na.hist.grob <- ggplotGrob(x = na.hist.res)
na.hist.grob <- ggplotGrob(x = na.hist.res)
upd.grob_w <- resize.grobs(ls.grobs = list(
"hist" = na.hist.grob, "heatmap" = test$heatmap.grob), dimensions = "widths",
start.unit = 1, end.unit = 55)
grid.arrange(grobs = list(upd.grob_w$hist, upd.grob_w$heatmap.grob), ncol = 1, nrow = 2,
heights = c(10, 30))
grid.arrange(grobs = list(upd.grob_w$hist, upd.grob_w$heatmap), ncol = 1, nrow = 2,
heights = c(10, 30))
is.matrix(miss.sesame.cg.beta.mat)
mtest <- miss.sesame.cg.beta.mat[order(apply(m, 1, sd, na.rm = TRUE), decreasing = FALSE), , drop = FALSE]
mtest <- miss.sesame.cg.beta.mat[order(apply(miss.sesame.cg.beta.mat, 1, sd, na.rm = TRUE), decreasing = FALSE), , drop = FALSE]
mtest[1:4,1:4]
mtest[1,]
na.test <- is.na(miss.sesame.cg.beta.mat)
na.test[1,]
all.test <- all(na.test)
grid.arrange(test$heatmap.grob)
test$heatmap.grob$widths
na.hist.grob$widths
upd.grob_w$heatmap$widths
grid.arrange(na.hist.grob)
grob1 = test$heatmap.grob
grob2 = na.hist.grob
dimensions = "widths"
length(grob1[[dimensions]])
length(grob2[[dimensions]])
positions = 52
max(positions)
positions[positions <= length(grob1[[dimensions]])]
resize.grob.oneway <- function(grob1, grob2, dimensions, positions){
#Get dimension units from the list of grobs to redimension
if(max(positions) > length(grob2[[dimensions]]) | min(positions) < 1){
stop("positions out of range in grob2.")
}
if(max(positions) > length(grob1[[dimensions]])){
warning("some positions out of range in grob1 ignored.")
positions <- positions[positions <= length(grob1[[dimensions]])]
}
grob1[[dimensions]][positions] <- grob2[[dimensions]][positions]
return(grob1)
}
heatmap.grob <- resize.grob.oneway(
grob1 = test$heatmap.grob, grob2 = na.hist.grob, dimensions = "widths",
positions = 52)
heatmap.grob$widths
test$heatmap.grob$widths
upd.grob_w <- resize.grobs(ls.grobs = list(
"hist" = na.hist.grob, "heatmap" = heatmap.grob), dimensions = "widths",
start.unit = 1, end.unit = 55)
grid.arrange(grobs = list(upd.grob_w$hist, upd.grob_w$heatmap), ncol = 1,
nrow = 2, heights = c(10, 30))
grid.arrange(grobs = list(upd.grob_w$hist, upd.grob_w$heatmap), ncol = 1,
nrow = 2, heights = c(10, 30))
#IMPORTS
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c(
"data.table","parallel","ggplot2", "psych", "BiocompR", "ggsci")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/handle_PCAWG_cohorts.R")
##PARAMETERS
#Load Sesame Matrix
sesame.cg.beta.mat <- readRDS(
"PCAWG_Paper/data/450K_Sesame_normalized_beta_matrices/Sesame_Normalized_CG_beta_matrix_rmPolymorph_V1.1_2021-02-12.RDS")
#Load HM450K probes annotation
HM450k.probes <- fread(
file = "Pancan_Repeats_Methylation/data/Illumina_HM450_Probes/HM450K_cg_probes_cleaned.bed",
select = c("chr","start","end","strand","probeIDs"),
stringsAsFactors = FALSE)
#Load Samples Annotation
sample.annotation <- make_cohorts_annotations(
pcawg.csv = "PCAWG4_Methylation_Metadata/PCAWG4_ICGC_TCGA.csv",
idat_folder = "PCAWG_Paper/data/HM450K_idat/OV-AU_idats/")
#Order CG probes following their location on the human genome
HM450k.probes[, chr := factor(chr, levels = c(1:22,"X","Y"))]
HM450k.probes <- HM450k.probes[order(chr, start)]
#Order probes the same way in the matrix
probes_order <- HM450k.probes$probeIDs[
HM450k.probes$probeIDs %in% rownames(sesame.cg.beta.mat)]
sesame.cg.beta.mat <- sesame.cg.beta.mat[probes_order, ]
#Remove complete data from the matrix
miss.sesame.cg.beta.mat <- sesame.cg.beta.mat[
!complete.cases(sesame.cg.beta.mat), ]
#transpose matrix
miss.sesame.cg.beta.mat <- t(miss.sesame.cg.beta.mat)
#Make samples annotation table
sample.annotation <- rbindlist(l = sample.annotation, idcol = "Cohorts")
#Make probes annotation
chromosomes <- HM450k.probes[
probeIDs %in% colnames(miss.sesame.cg.beta.mat)]$chr
#Remove sesame.cg.beta.mat
rm(sesame.cg.beta.mat)
#Plot Heatmap of all probes with missing values in PCAWG dataset (WARNING: Runtime ~ 5 hours)
facet_meth_heatmap <- gg2heatmap(
m = miss.sesame.cg.beta.mat, na.handle = "keep", raster = "Lanczos",
rank.fun = "sd", ncores = 13, dist.method = "none", dendrograms = FALSE,
lgd.space.width = 2, annot.grps = list("Chromosomes" = chromosomes),
annot.pal = rainbow(n = 24), annot.size = 3, axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.title.y.left = element_text(size = 12),
plot.title = "PCAWG missing methylation data distribution",
row.type = "HM450K PCAWG samples", x.lab = "CG probes", y.lab = "Samples",
lgd.scale.name = "Methylation", facet = "Chromosomes", verbose = TRUE)
saveRDS(object = facet_meth_heatmap,
file = "PCAWG_Paper/graphs/Heatmap_missing_data_HM450K_PCAWG.RDS")
ggsave(filename = "PCAWG_Paper/graphs/PCAWG_incomplete_data.pdf",
plot = facet_meth_heatmap$result.grob, device = "pdf", width = 20,
height = 10)
ggsave(filename = "PCAWG_Paper/graphs/PCAWG_incomplete_data.png",
plot = facet_meth_heatmap$result.grob, device = "png", width = 20,
height = 10)
rm(facet_meth_heatmap)
#IMPORTS
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c(
"data.table","parallel","ggplot2", "psych", "BiocompR", "ggsci")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/handle_PCAWG_cohorts.R")
##PARAMETERS
#Load Sesame Matrix
sesame.cg.beta.mat <- readRDS(
"PCAWG_Paper/data/450K_Sesame_normalized_beta_matrices/Sesame_Normalized_CG_beta_matrix_rmPolymorph_V1.1_2021-02-12.RDS")
#Load HM450K probes annotation
HM450k.probes <- fread(
file = "Pancan_Repeats_Methylation/data/Illumina_HM450_Probes/HM450K_cg_probes_cleaned.bed",
select = c("chr","start","end","strand","probeIDs"),
stringsAsFactors = FALSE)
#Load Samples Annotation
sample.annotation <- make_cohorts_annotations(
pcawg.csv = "PCAWG4_Methylation_Metadata/PCAWG4_ICGC_TCGA.csv",
idat_folder = "PCAWG_Paper/data/HM450K_idat/OV-AU_idats/")
#Order CG probes following their location on the human genome
HM450k.probes[, chr := factor(chr, levels = c(1:22,"X","Y"))]
HM450k.probes <- HM450k.probes[order(chr, start)]
#Order probes the same way in the matrix
probes_order <- HM450k.probes$probeIDs[
HM450k.probes$probeIDs %in% rownames(sesame.cg.beta.mat)]
sesame.cg.beta.mat <- sesame.cg.beta.mat[probes_order, ]
#Remove complete data from the matrix
miss.sesame.cg.beta.mat <- sesame.cg.beta.mat[
!complete.cases(sesame.cg.beta.mat), ]
#transpose matrix
miss.sesame.cg.beta.mat <- t(miss.sesame.cg.beta.mat)
#Make samples annotation table
sample.annotation <- rbindlist(l = sample.annotation, idcol = "Cohorts")
#Make probes annotation
chromosomes <- HM450k.probes[
probeIDs %in% colnames(miss.sesame.cg.beta.mat)]$chr
rm(sesame.cg.beta.mat)
#Restart and reload session
facet_meth_heatmap <- readRDS(file = "PCAWG_Paper/graphs/Heatmap_missing_data_HM450K_PCAWG.RDS")
#Plot histograms of missing data along the genome
na.count <- colSums(is.na(miss.sesame.cg.beta.mat))
#Map na.count to cg probes
na.distrib <- rep(x = colnames(miss.sesame.cg.beta.mat), times = na.count)
# na.distrib <- rep(x = seq(ncol(miss.sesame.cg.beta.mat)), times = na.count)
na.hist_by_chr <- fancy.hist(
x = na.distrib, nbreaks = 1001, ncores = 5, facet = chromosomes)
na.hist.res <- na.hist_by_chr + theme(
panel.border = element_rect(colour = "black", fill = NA),
strip.background = element_rect(color = "black"),
panel.spacing = unit(0, "lines"),
axis.title.x = element_blank()) +
labs(x = "Distribution of missing methylation along PCAWG genomes",
y = "Missing data")
na.hist.grob <- ggplotGrob(x = na.hist.res)
heatmap.grob <- resize.grob.oneway(
grob1 = facet_meth_heatmap$heatmap.grob, grob2 = na.hist.grob, dimensions = "widths",
positions = 52)
upd.grob_w <- resize.grobs(ls.grobs = list(
"hist" = na.hist.grob, "heatmap" = heatmap.grob), dimensions = "widths",
start.unit = 1, end.unit = 55)
#Bring histogram of missing data with
grid.arrange(grobs = list(upd.grob_w$hist, upd.grob_w$heatmap), ncol = 1,
nrow = 2, heights = c(10, 30))
final.figure <- grid.arrange(
grobs = list(upd.grob_w$hist, upd.grob_w$heatmap), ncol = 1, nrow = 2,
heights = c(10, 30))
#Save plot
ggsave(
filename = "PCAWG_Paper/graphs/Heatmap_&_histogram_PCAWG_incomplete_data.pdf",
plot = final.figure, device = "pdf", width = 20, height = 10)
iris3
.rs.restartR()
#IMPORTS
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c(
"data.table","parallel","ggplot2", "psych", "BiocompR", "ggsci")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/handle_PCAWG_cohorts.R")
##PARAMETERS
#Load Sesame Matrix
sesame.cg.beta.mat <- readRDS(
"PCAWG_Paper/data/450K_Sesame_normalized_beta_matrices/Sesame_Normalized_CG_beta_matrix_rmPolymorph_V1.1_2021-02-12.RDS")
#Load HM450K probes annotation
HM450k.probes <- fread(
file = "Pancan_Repeats_Methylation/data/Illumina_HM450_Probes/HM450K_cg_probes_cleaned.bed",
select = c("chr","start","end","strand","probeIDs"),
stringsAsFactors = FALSE)
#Load Samples Annotation
sample.annotation <- make_cohorts_annotations(
pcawg.csv = "PCAWG4_Methylation_Metadata/PCAWG4_ICGC_TCGA.csv",
idat_folder = "PCAWG_Paper/data/HM450K_idat/OV-AU_idats/")
#Order CG probes following their location on the human genome
HM450k.probes[, chr := factor(chr, levels = c(1:22,"X","Y"))]
HM450k.probes <- HM450k.probes[order(chr, start)]
#Order probes the same way in the matrix
probes_order <- HM450k.probes$probeIDs[
HM450k.probes$probeIDs %in% rownames(sesame.cg.beta.mat)]
sesame.cg.beta.mat <- sesame.cg.beta.mat[probes_order, ]
#Remove complete data from the matrix
miss.sesame.cg.beta.mat <- sesame.cg.beta.mat[
!complete.cases(sesame.cg.beta.mat), ]
#transpose matrix
miss.sesame.cg.beta.mat <- t(miss.sesame.cg.beta.mat)
#Make samples annotation table
sample.annotation <- rbindlist(l = sample.annotation, idcol = "Cohorts")
#Make probes annotation
chromosomes <- HM450k.probes[
probeIDs %in% colnames(miss.sesame.cg.beta.mat)]$chr
#Remove sesame.cg.beta.mat
rm(sesame.cg.beta.mat)
#Plot Heatmap of all probes with missing values in PCAWG dataset (WARNING: Runtime ~ 5 hours)
facet_meth_heatmap <- gg2heatmap(
m = miss.sesame.cg.beta.mat, na.handle = "keep", raster = "Lanczos",
rank.fun = "sd", ncores = 13, dist.method = "none", dendrograms = FALSE,
lgd.space.width = 2, annot.grps = list("Chromosomes" = chromosomes),
annot.pal = rainbow(n = 24), annot.size = 3, axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.title.y.left = element_text(size = 12),
plot.title = "PCAWG missing methylation data distribution",
row.type = "HM450K PCAWG samples", x.lab = "CG probes", y.lab = "Samples",
lgd.scale.name = "Methylation", facet = "Chromosomes", verbose = TRUE)
#Save result
saveRDS(object = facet_meth_heatmap,
file = "PCAWG_Paper/graphs/Heatmap_missing_data_HM450K_PCAWG.RDS")
ggsave(filename = "PCAWG_Paper/graphs/PCAWG_incomplete_data.pdf",
plot = facet_meth_heatmap$result.grob, device = "pdf", width = 20,
height = 10)
ggsave(filename = "PCAWG_Paper/graphs/PCAWG_incomplete_data.png",
plot = facet_meth_heatmap$result.grob, device = "png", width = 20,
height = 10)
rm(facet_meth_heatmap)
#Restart session
.rs.restartR()
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c(
"data.table","parallel","ggplot2", "psych", "BiocompR", "ggsci")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/handle_PCAWG_cohorts.R")
sesame.cg.beta.mat <- readRDS(
"PCAWG_Paper/data/450K_Sesame_normalized_beta_matrices/Sesame_Normalized_CG_beta_matrix_rmPolymorph_V1.1_2021-02-12.RDS")
HM450k.probes <- fread(
file = "Pancan_Repeats_Methylation/data/Illumina_HM450_Probes/HM450K_cg_probes_cleaned.bed",
select = c("chr","start","end","strand","probeIDs"),
stringsAsFactors = FALSE)
devtools::document()
devtools::install()
library(NCmisc)
list.functions.in.file("R/fancy_histogram.R")
library(ggplot2)
library(data.table)
library(ggrepel)
library(parallel)
list.functions.in.file("R/fancy_histogram.R")
library(quantmod)
list.functions.in.file("R/fancy_histogram.R")
list.functions.in.file("R/fused_plot.R")
library(gridExtra)
list.functions.in.file("R/fused_plot.R")
library(BiocompR)
list.functions.in.file("R/fused_plot.R")
library(corrplot)
list.functions.in.file("R/fused_plot.R")
library(corrplot)
list.functions.in.file("R/fused_plot.R")
library(psych)
list.functions.in.file("R/fused_plot.R")
library(ggdendro)
list.functions.in.file("R/fused_plot.R")
list.functions.in.file("R/fused_plot.R")
list.functions.in.file("R/gg2heatmap.R")
library(magick)
list.functions.in.file("R/gg2heatmap.R")
library(grid)
list.functions.in.file("R/gg2heatmap.R")
library(parallelDist)
list.functions.in.file("R/gg2heatmap.R")
devtools::document()
upd.grob_h <- BiocompR::resize.grobs(ls.grobs = ls.h.grobs, dimensions = 'heights',
start.unit = 7, end.unit = 9)
upd.grob_h <- BiocompR::resize.grobs(ls.grobs = ls.h.grobs, dimensions = 'heights',
start.unit = 7, end.unit = 9)
devtools::document()
devtools::install()
