#'                 (Default: cat.step = 10L).
#' @param cat.max  Maximum amount of ranges to create (Default: cat.max = 10L).
#'                 Values outside the last range are grouped into an extra bin
#'                 named "over <cat.step * cat.max>". In total the plot will
#'                 display 1 boxplot for each range, and one additional boxplot
#'                 for the values falling into the extra bin.
#' @param fill     A \code{character} to specify a color to be used for filling
#'                 boxplot. The color will be used to derive light shades from
#'                 it. The given input color will match the color of the boxplot
#'                 computed on the highest number of values (in other words: for
#'                 the largest category). Consequently, all the shades generated
#'                 will be lighter than the original one. Thus, it is advised to
#'                 use a dark color (Default: fill = "deepskyblue3").
#' @return A \code{gg} plot object displaying boxplots and/or violin plots.
#' @author Yoann Pageaud, Yassen Assenov.
#' @export
bivar.plot <- function(data, violin = FALSE, cat.step = 10L, cat.max = 10L,
fill = "deepskyblue3"){
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
dfr<-data[, quantile(x = Var1), by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
#Plot categories boxplot
bivar<-ggplot()
if(violin){
bivar <- bivar +
geom_violin(data = data,
mapping = aes(x = category, y = Var1, alpha = cat.sizes),
fill = fill) +
geom_boxplot(data = dfr, mapping = aes(x = category, y = V1),
fill = "white", outlier.size = 1.5, width = 0.1)
} else {
bivar <- bivar +
geom_boxplot(data = dfr, mapping = aes(x = category, y = V1),
outlier.size = 1.5, color = NA, outlier.color = "black") +
geom_boxplot(data = dfr,
mapping = aes(x = category, y = V1, alpha = cat.sizes),
fill = fill, outlier.shape = NA)
}
bivar <- bivar +
theme(legend.position="none",
panel.background = element_blank(),
panel.grid.major = element_line(colour = "grey"),
axis.title = element_text(size = 13, hjust = 0.5),
axis.text = element_text(size = 11, color = "black"),
axis.ticks = element_blank()) +
labs(x = oldcolnames[2], y = oldcolnames[1])
return(bivar)
}
bivar.plot(test)
BiocompR::bivar.plot(test)
data
data[category == "] 40, 50 ]\n1.81e+02"]
dfr
dfr[category == "] 40, 50 ]\n1.81e+02"]
dfr
dfr[category == "] 50, 60 ]\n2.13e+02"]
data = test
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
# dfr <- data[, quantile(x = Var1), by = c("category","cat.sizes")]
dfr <- data[, grDevices::boxplot.stats(x = Var1), by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
data = test
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
# dfr <- data[, quantile(x = Var1), by = c("category","cat.sizes")]
dfr <- data[, boxplot.stats(x = Var1), by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
?boxplot.stats
data = test
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
# dfr <- data[, quantile(x = Var1), by = c("category","cat.sizes")]
dfr <- data[, grDevices::boxplot.stats(x = Var1)$stats, by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
dfr
dfr1 <- dfr
data = test
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
dfr <- data[, quantile(x = Var1), by = c("category","cat.sizes")]
# dfr <- data[, grDevices::boxplot.stats(x = Var1)$stats, by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
dfr
dfr2 <- dfr
dfr1 == dfr2
cbind(dfr1, dfr2)
?quantile
data = test
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
dfr <- data[, quart := quantile(x = Var1), by = c("category","cat.sizes")]
#Categories as Levels
data = test
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
dfr <- data[, quart := .(quantile(x = Var1)), by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
data
data[, quart :=.(quantile(x = Var1)) ]
data
data[, quart :=.(quantile(x = Var1)), by = c("category","cat.sizes")]
data[, quantile(x = Var1), by = c("category","cat.sizes")]
##FUNCTIONS
#' Computes boxplots or violins from 1 variable values against ranges of a 2nd
#' one.
#'
#' @param data   A two-columns \code{data.frame}:
#'                 \itemize{
#'                  \item{column 1 contains values of the 1st variable. These
#'                  values will be used for computing boxplots.}
#'                  \item{column 2 contains values of the 2nd variable. These
#'                  values will be used to define ranges, one range per
#'                  boxplot.}
#'                 }
#' @param violin   A \code{logical} to specify whether violins of categories
#'                 should be displayed with the boxplots (Warning: setting
#'                 violin = TRUE significantly increase the computing time.
#'                 Default: violin = FALSE).
#' @param cat.step A \code{numeric} to specify the size of ranges.
#'                 (Default: cat.step = 10L).
#' @param cat.max  Maximum amount of ranges to create (Default: cat.max = 10L).
#'                 Values outside the last range are grouped into an extra bin
#'                 named "over <cat.step * cat.max>". In total the plot will
#'                 display 1 boxplot for each range, and one additional boxplot
#'                 for the values falling into the extra bin.
#' @param fill     A \code{character} to specify a color to be used for filling
#'                 boxplot. The color will be used to derive light shades from
#'                 it. The given input color will match the color of the boxplot
#'                 computed on the highest number of values (in other words: for
#'                 the largest category). Consequently, all the shades generated
#'                 will be lighter than the original one. Thus, it is advised to
#'                 use a dark color (Default: fill = "deepskyblue3").
#' @return A \code{gg} plot object displaying boxplots and/or violin plots.
#' @author Yoann Pageaud, Yassen Assenov.
#' @export
bivar.plot <- function(data, violin = FALSE, cat.step = 10L, cat.max = 10L,
fill = "deepskyblue3"){
#Convert into a data.table
if(!is.data.table(data)){
data <- as.data.table(data)
}
#Create colnames
oldcolnames<-colnames(data)
colnames(data)<-c("Var1","Var2")
#Create Categories from Var2
data[, category :=.(as.integer(floor(Var2 / cat.step)))]
#Assign values to last category if there category is above cat.max
data[category > cat.max, category := cat.max]
#Get Number of CpGs by categories
data[, cat.sizes := .N, by = "category"]
#Calculate intervals
cat.breaks <- cumsum(rep(cat.step, cat.max))
cat.first <- ifelse(is.integer(data[, 1]), "1", "0")
#Create X Axis Labels
cat.labels <- paste0("] ", c(cat.first, cat.breaks[-length(cat.breaks)]),
", ", cat.breaks, " ]")
#Close first interval
cat.labels[1]<-gsub(pattern = '^\\]\\s', replacement = "[ ", x=cat.labels[1])
#Add last interval
cat.labels <- c(cat.labels, paste("over", tail(cat.breaks, 1)))
#Convert categories as factors
data[, category := .(factor(category, levels = c(0:(length(cat.breaks)))))]
#Update levels
levels(data$category) <- cat.labels
#Get boxplot statistics
dfr <- data[, quantile(x = Var1), by = c("category","cat.sizes")]
#Categories as Levels
levels(dfr$category)<-dfr[
match(x = levels(category), table = category)][, category:=.(paste0(
category,"\n",formatC(x = cat.sizes, format = "e",digits = 2)))]$category
#Change category also in data
levels(data$category)<-levels(dfr$category)
#Plot categories boxplot
bivar<-ggplot()
if(violin){
bivar <- bivar +
geom_violin(data = data,
mapping = aes(x = category, y = Var1, alpha = cat.sizes),
fill = fill) +
geom_boxplot(data = dfr, mapping = aes(x = category, y = V1),
fill = "white", outlier.size = 1.5, width = 0.1)
} else {
bivar <- bivar +
geom_boxplot(data = dfr, mapping = aes(x = category, y = V1),
outlier.size = 1.5, color = NA, outlier.color = "black") +
geom_boxplot(data = dfr,
mapping = aes(x = category, y = V1, alpha = cat.sizes),
fill = fill, outlier.shape = NA)
}
bivar <- bivar +
theme(legend.position="none",
panel.background = element_blank(),
panel.grid.major = element_line(colour = "grey"),
axis.title = element_text(size = 13, hjust = 0.5),
axis.text = element_text(size = 11, color = "black"),
axis.ticks = element_blank()) +
labs(x = oldcolnames[2], y = oldcolnames[1])
return(bivar)
}
bivar.plot(test)
bivar.plot(test, violin = TRUE)
list.functions.in.file(filename = "R/bin_polygons.R")
list.functions.in.file(filename = "R/bivar_plot.R")
?quantile
devtools::document()
devtools::install()
library(BiocompR)
list.functions.in.file(filename = "R/bivar_plot.R")
library(NCmisc)
list.functions.in.file(filename = "R/bivar_plot.R")
list.functions.in.file(filename = "R/bin_polygons.R")
list.functions.in.file(filename = "R/core_ggplot_fun.R")
library(gridExtra)
list.functions.in.file(filename = "R/core_ggplot_fun.R")
library(grid)
list.functions.in.file(filename = "R/core_ggplot_fun.R")
list.functions.in.file(filename = "R/core_stat_tests.R")
list.functions.in.file(filename = "R/core_stat_tests.R")
library(parallel)
list.functions.in.file(filename = "R/core_stat_tests.R")
library(BiocompR)
list.functions.in.file(filename = "R/core_stat_tests.R")
list.functions.in.file(filename = "R/eva.R")
?arrow
?arrow
list.functions.in.file(filename = "R/eva.R")
?corr.test
??corr.test
list.functions.in.file(filename = "R/eva.R")
library(psych)
library(gridExtra)
library(grid)
list.functions.in.file(filename = "R/eva.R")
?unit
list.functions.in.file(filename = "R/core_ggplot_fun.R")
list.functions.in.file(filename = "R/eva.R")
list.functions.in.file(filename = "R/fancy_histogram.R")
library(quantmod)
?findValleys
findValleys
coredata
list.functions.in.file(filename = "R/fancy_histogram.R")
list.functions.in.file(filename = "R/fancy_histogram.R")
library(ggrepel)
list.functions.in.file(filename = "R/fancy_histogram.R")
list.functions.in.file(filename = "R/fused_plot.R")
list.functions.in.file(filename = "R/fused_plot.R")
??corrMatOrder
library(corrplot)
?dendro_data
list.functions.in.file(filename = "R/fused_plot.R")
corrMatOrder
?switch
?dendro_data
library(ggdendro)
?dendro_data
dendro_data
devtools::document()
devtools::install()
library(BiocompR)
list.functions.in.file(filename = "R/fused_plot.R")
library(NCmisc)
list.functions.in.file(filename = "R/fused_plot.R")
list.functions.in.file(filename = "R/gg2heatmap.R")
list.functions.in.file(filename = "R/ggclustered_heatmap.R")
list.functions.in.file(filename = "R/ggcorr.R")
?capitalize
??capitalize
Hmisc::capitalize("test")
toupper("test")
list.functions.in.file(filename = "R/ggclustered_heatmap.R")
list.functions.in.file(filename = "R/ggcorr.R")
list.functions.in.file(filename = "R/ggcoverage.R")
list.functions.in.file(filename = "R/ggcraviola.R")
list.functions.in.file(filename = "R/ks_plot.R")
list.functions.in.file(filename = "R/manage_na.R")
list.functions.in.file(filename = "R/sunset.R")
?Iranges
??Iranges
??IRanges
?reduce
list.functions.in.file(filename = "R/sunset.R")
list.functions.in.file(filename = "R/warnings_handling.R")
devtools::document()
devtools::install()
library(BiocompR)
pack <- available.packages()
pack["ggplot2","Depends"]
pack <- available.packages()
pack["BiocompR","Depends"]
packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"Hmisc" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"corrplot" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"IRanges" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"data.table" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"devtools" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"fastcluster" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
"ggdendro" %in% packrat:::recursivePackageDependencies("BiocompR",lib.loc = .libPaths()[1])
