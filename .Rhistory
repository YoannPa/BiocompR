sub.dt[, c("name.Y", "name.X") := .(pc.select[1], pc.select[2])]
pc.select <- c("labels", unlist(comb.pcs[i]))
pc.select
unlist(comb.pcs[i])
data.table()
?data.table
as.data.table(expand.grid(PC, PC), stringsAsFactors = FALSE)[Var1 != Var2]
comb.pcs <- as.data.table(expand.grid(PC, PC), stringsAsFactors = FALSE)[Var1 != Var2]
comb.pcs[i])
i
comb.pcs
comb.pcs[i]
unlist(comb.pcs[i])
comb.pcs[[i]]
comb.pcs[i]
as.vector(comb.pcs[i])
expand.grid(PC, PC)
expand.grid(PC, PC)[Var1 != Var2]
comb.pcs <- as.data.table(expand.grid(PC, PC))[Var1 != Var2]
comb.pcs
comb.pcs[i]
as.matrix(comb.pcs[i])
comb.pcs[i]
c("labels", (comb.pcs[i]))
unlist(c("labels", (comb.pcs[i])))
comb.pcs[i]
as.character(c("labels", comb.pcs[i]))
c("labels", as.character(comb.pcs[i]))
as.character(comb.pcs[i])
comb.pcs[i]
as.numeric(comb.pcs[i])
comb.pcs
comb.pcs$Var1
as.character(comb.pcs)
as.data.table(expand.grid(PC, PC))
as.data.table(expand.grid(PC, PC))$Var1
expand.grid(PC, PC)
expand.grid(PC, PC)$Var1
?expand.grid
expand.grid(PC, PC, stringsAsFactors = FALSE)
expand.grid(PC, PC, stringsAsFactors = FALSE)$Var1
comb.pcs <- as.data.table(expand.grid(PC, PC, stringsAsFactors = FALSE))[Var1 != Var2]
comb.pcs
c("labels", comb.pcs[i])
unlist(c("labels", comb.pcs[i]))
pc.select <- unlist(c("labels", comb.pcs[i]))
loadings.data[, ..pc.select, ]
sub.dt <- loadings.data[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[1], pc.select[2])]
sub.dt
ls.dt.loadings <- lapply(X = seq(nrow(comb.pcs)), FUN = function(i){
pc.select <- unlist(c("labels", comb.pcs[i]))
sub.dt <- loadings.data[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[1], pc.select[2])]
})
ls.dt.loadings[[1]]
ls.dt.loadings[[2]]
rbindlist(l = ls.dt.loadings)
rbindlist(l = ls.dt.loadings, use.names = FALSE)
loadings
loadings.data
comb.pcs <- as.data.table(expand.grid(PC, PC, stringsAsFactors = FALSE))[Var1 != Var2]
ls.dt.loadings <- lapply(X = seq(nrow(comb.pcs)), FUN = function(i){
pc.select <- unlist(c("labels", comb.pcs[i]))
sub.dt <- loadings.data[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[2], pc.select[3])]
})
comb.pcs
comb.pcs <- as.data.table(expand.grid(PC, PC, stringsAsFactors = FALSE))[Var1 != Var2]
ls.dt.loadings <- lapply(X = seq(nrow(comb.pcs)), FUN = function(i){
pc.select <- unlist(c("labels", comb.pcs[i]))
sub.dt <- loadings.data[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[2], pc.select[3])]
})
rbindlist(l = ls.dt.loadings, use.names = FALSE)
dt.test <- rbindlist(l = ls.dt.loadings, use.names = FALSE)
dt.test
setnames(x = dt.test, old = 2, new = "PCy")
dt.test
setnames(x = dt.test, old = 3, new = "PCx")
dt.test
dt.test[, .(labels, name.X, PCx, name.Y, PCy)]
dt.test
dt.test <- dt.test[, .(labels, name.X, PCx, name.Y, PCy)]
dt.test
loadings.data <- rbindlist(l = ls.dt.loadings, use.names = FALSE)
setnames(x = loadings.data, old = 2, new = "PCy")
setnames(x = loadings.data, old = 3, new = "PCx")
loadings.data <- loadings.data[, .(labels, name.X, PCx, name.Y, PCy)]
loadings.data
!is.null(top.load.by.quad)
loadings.data[, load.sqrd.length := PCx^2 + PCy^2]
loadings.data
loadings.data[PCx >= 0 & PCy >= 0, quadrant := "top-right"]
loadings.data[PCx >= 0 & PCy < 0, quadrant := "bottom-right"]
loadings.data[PCx < 0 & PCy < 0, quadrant := "bottom-left"]
loadings.data[PCx < 0 & PCy >= 0, quadrant := "top-left"]
loadings.data
top.load.by.quad
loadings.data[order(quadrant, -load.sqrd.length)]
loadings.data[order(quadrant, -load.sqrd.length),
by = c("name.X", "name.Y")]
loadings.data[order(quadrant, -load.sqrd.length),
by = .(name.X, name.Y)]
loadings.data[, order(quadrant, -load.sqrd.length),
by = .(name.X, name.Y)]
loadings.data[order(quadrant, -load.sqrd.length), ,
by = .(name.X, name.Y)]
loadings.data[order(quadrant, -load.sqrd.length),
colnames(loadings.data),
by = .(name.X, name.Y)]
loadings.data[order(quadrant, -load.sqrd.length), .SD,
by = .(name.X, name.Y)]
loadings.data <- loadings.data[order(quadrant, -load.sqrd.length), .SD,
by = .(name.X, name.Y)]
loadings.data[, head(.SD, top.load.by.quad),
by = .(name.X, name.Y, quadrant)]
top.load.by.quad
5*4
comb.pcs
20*20
loadings.data[, head(.SD, top.load.by.quad),
by = .(name.X, name.Y, quadrant)]
loadings.data <- loadings.data[, head(.SD, top.load.by.quad),
by = .(name.X, name.Y, quadrant)]
if(!is.null(load.above.x) | !is.null(load.below.x)){
if(!is.null(load.above.x) & is.null(load.below.x)){
loadings.data <- loadings.data[PCx >= load.above.x]
} else if(!is.null(load.below.x) & is.null(load.above.x)){
loadings.data <- loadings.data[PCx <= load.below.x]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
if(!is.null(load.above.y) | !is.null(load.below.y)){
if(!is.null(load.above.y) & is.null(load.below.y)){
loadings.data <- loadings.data[PCy >= load.above.y]
} else if(!is.null(load.below.y) & is.null(load.above.y)){
loadings.data <- loadings.data[PCy <= load.below.y]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
biplt <- ggplot() +
theme(axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid = element_line(colour = "grey"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.key = element_blank())
!is.null(color.data) & is.null(shape.data)
!is.null(color.data) & !is.null(shape.data)
color.data != shape.data
dt.scaled.pc
colnames(dt.scaled.pc)
colnames(dt.scaled.pc)[1:15]
dim(dt.scaled.pc)
colnames(dt.annot)[1:15]
colnames(data)
colnames(data)[1:20]
data[1:7]
data[, 1:7]
data <- data[,1:7]
dt.annot <- as.data.table(as.data.frame(data))
PC <- paste0("PC", PCs)
color.data
!is.null(color.data)
color.data %in% colnames(dt.annot)
setnames(x = dt.annot, old = color.data, new = "color.data")
is.null(levels(dt.annot$color.data))
dt.annot[, color.data := as.factor(color.data)]
!is.null(shape.data)
shape.data != color.data
cbind(dt.scaled.pc, dt.annot)
lam <- prcomp.res$sdev[PCs]
#Create scaling factor
lam <- lam * sqrt(nrow(prcomp.res$x))
lam <- lam^scale
dt.scaled.pc <- as.data.table(t(t(prcomp.res$x[, PC])/lam))
dt.scaled.pc
dt.scaled.pc <- cbind(dt.scaled.pc, dt.annot)
dt.scaled.pc
ve <- prcomp.res$sdev^2/sum(prcomp.res$sdev^2)
lab.PC <- paste0(PC, " (", round(ve[PCs] * 100, 2), "%)")
loadings
class(prcomp.res)[1] == "prcomp"
class(prcomp.res)[1] == "irlba_prcomp"
loadings.data <- cbind(
"labels" = names(prcomp.res$center),
as.data.table(prcomp.res$rotation))[, c("labels", PC), with = FALSE]
scaler <- min(unlist(lapply(X = PC, FUN = function(p){
max(abs(dt.scaled.pc[[p]]))/max(abs(loadings.data[[p]]))
})))
loadings.data[, c(PC) := lapply(
X = .SD, FUN = function(i){ i * scaler * 0.8 }), .SDcols = PC]
comb.pcs <- as.data.table(expand.grid(PC, PC, stringsAsFactors = FALSE))[Var1 != Var2]
comb.pcs
dt.scaled.pc
dt.annot
unlist(c(comb.pcs[i], colnames(dt.annot)))
pc.select <- unlist(c(comb.pcs[i], colnames(dt.annot)))
sub.dt <- loadings.data[, ..pc.select, ]
dt.scaled.pc[, ..pc.select, ]
sub.dt <- dt.scaled.pc[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[2], pc.select[3])]
sub.dt
pc.select <- unlist(c(comb.pcs[i], colnames(dt.annot)))
sub.dt <- dt.scaled.pc[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[1], pc.select[2])]
sub.dt
ls.dt.scaled <- lapply(X = seq(nrow(comb.pcs)), FUN = function(i){
pc.select <- unlist(c(comb.pcs[i], colnames(dt.annot)))
sub.dt <- dt.scaled.pc[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[1], pc.select[2])]
})
dt.scaled.pc <- rbindlist(l = ls.dt.scaled, use.names = FALSE)
dt.scaled.pc
setnames(x = loadings.data, old = 1, new = "PCy")
setnames(x = loadings.data, old = 2, new = "PCx")
loadings.data[, .(name.X, PCx, name.Y, PCy)]
setnames(x = dt.scaled.pc, old = 1, new = "PCy")
setnames(x = dt.scaled.pc, old = 2, new = "PCx")
dt.scaled.pc
dt.scaled.pc[, .(name.X, PCx, name.Y, PCy, colnames(dt.annot))]
dt.scaled.pc[, c(name.X, PCx, name.Y, PCy, colnames(dt.annot)), ]
dt.scaled.pc[, c("name.X", "PCx", "name.Y", "PCy", colnames(dt.annot)), ]
cols <- c("name.X", "PCx", "name.Y", "PCy", colnames(dt.annot))
dt.scaled.pc[, ..cols, ]
dt.scaled.pc <- dt.scaled.pc[, ..cols, ]
#Duplicate data.table
dt.annot <- as.data.table(as.data.frame(data))
#Make PC names vector
PC <- paste0("PC", PCs)
#Rename annotation column used for points colors and shapes
if(!is.null(color.data)){
if(color.data %in% colnames(dt.annot)){
setnames(x = dt.annot, old = color.data, new = "color.data")
if(is.null(levels(dt.annot$color.data))){
dt.annot[, color.data := as.factor(color.data)]
}
} else { stop("'color.data' does not match any column name in 'data'.") }
}
if(!is.null(shape.data)){
if(shape.data != color.data){
if(shape.data %in% colnames(dt.annot)){
setnames(x = dt.annot, old = shape.data, new = "shape.data")
if(is.null(levels(dt.annot$shape.data))){
dt.annot[, shape.data := as.factor(shape.data)]
}
} else { stop("'shape.data' does not match any column name in 'data'.") }
}
}
#Get sdev from selected PCs
lam <- prcomp.res$sdev[PCs]
#Create scaling factor
lam <- lam * sqrt(nrow(prcomp.res$x))
lam <- lam^scale
#Scale PCA data
dt.scaled.pc <- as.data.table(t(t(prcomp.res$x[, PC])/lam))
dt.scaled.pc <- cbind(dt.scaled.pc, dt.annot)
# setnames(x = dt.scaled.pc, old = PC[1], new = "PCx")
# setnames(x = dt.scaled.pc, old = PC[2], new = "PCy")
#Calculate the percentage of variability explained by the principal component
ve <- prcomp.res$sdev^2/sum(prcomp.res$sdev^2)
lab.PC <- paste0(PC, " (", round(ve[PCs] * 100, 2), "%)")
if(class(prcomp.res)[1] == "prcomp"){
loadings.data <- as.data.table(
prcomp.res$rotation, keep.rownames = "labels")[, c("labels", PC),
with = FALSE]
} else if(class(prcomp.res)[1] == "irlba_prcomp"){
loadings.data <- cbind(
"labels" = names(prcomp.res$center),
as.data.table(prcomp.res$rotation))[, c("labels", PC), with = FALSE]
}
scaler <- min(unlist(lapply(X = PC, FUN = function(p){
max(abs(dt.scaled.pc[[p]]))/max(abs(loadings.data[[p]]))
})))
# scaler <- min(
#   max(abs(dt.scaled.pc[["PCx"]]))/max(abs(loadings.data[["PCx"]])),
#   max(abs(dt.scaled.pc[["PCy"]]))/max(abs(loadings.data[["PCy"]])))
loadings.data[, c(PC) := lapply(
X = .SD, FUN = function(i){ i * scaler * 0.8 }), .SDcols = PC]
#Create possible PCs combinations
comb.pcs <- as.data.table(
expand.grid(PC, PC, stringsAsFactors = FALSE))[Var1 != Var2]
#Recreate dt.scaled.pc
ls.dt.scaled <- lapply(X = seq(nrow(comb.pcs)), FUN = function(i){
pc.select <- unlist(c(comb.pcs[i], colnames(dt.annot)))
sub.dt <- dt.scaled.pc[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[1], pc.select[2])]
})
dt.scaled.pc <- rbindlist(l = ls.dt.scaled, use.names = FALSE)
setnames(x = dt.scaled.pc, old = 1, new = "PCy")
setnames(x = dt.scaled.pc, old = 2, new = "PCx")
cols <- c("name.X", "PCx", "name.Y", "PCy", colnames(dt.annot))
dt.scaled.pc <- dt.scaled.pc[, ..cols, ]
#Recreate loadings.data
ls.dt.loadings <- lapply(X = seq(nrow(comb.pcs)), FUN = function(i){
pc.select <- unlist(c("labels", comb.pcs[i]))
sub.dt <- loadings.data[, ..pc.select, ]
sub.dt[, c("name.Y", "name.X") := .(pc.select[2], pc.select[3])]
})
loadings.data <- rbindlist(l = ls.dt.loadings, use.names = FALSE)
setnames(x = loadings.data, old = 2, new = "PCy")
setnames(x = loadings.data, old = 3, new = "PCx")
loadings.data <- loadings.data[, .(labels, name.X, PCx, name.Y, PCy)]
!is.null(top.load.by.quad)
loadings.data[, load.sqrd.length := PCx^2 + PCy^2]
#Assign quadrants
loadings.data[PCx >= 0 & PCy >= 0, quadrant := "top-right"]
loadings.data[PCx >= 0 & PCy < 0, quadrant := "bottom-right"]
loadings.data[PCx < 0 & PCy < 0, quadrant := "bottom-left"]
loadings.data[PCx < 0 & PCy >= 0, quadrant := "top-left"]
#Keep top N longest arrows by quadrant and by PC combinations
loadings.data <- loadings.data[order(quadrant, -load.sqrd.length), .SD,
by = .(name.X, name.Y)]
loadings.data <- loadings.data[, head(.SD, top.load.by.quad),
by = .(name.X, name.Y, quadrant)]
if(!is.null(load.above.x) | !is.null(load.below.x)){
if(!is.null(load.above.x) & is.null(load.below.x)){
loadings.data <- loadings.data[PCx >= load.above.x]
} else if(!is.null(load.below.x) & is.null(load.above.x)){
loadings.data <- loadings.data[PCx <= load.below.x]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
if(!is.null(load.above.y) | !is.null(load.below.y)){
if(!is.null(load.above.y) & is.null(load.below.y)){
loadings.data <- loadings.data[PCy >= load.above.y]
} else if(!is.null(load.below.y) & is.null(load.above.y)){
loadings.data <- loadings.data[PCy <= load.below.y]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
biplt <- ggplot() +
theme(axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid = element_line(colour = "grey"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.key = element_blank())
!is.null(color.data) & is.null(shape.data)
!is.null(color.data) & !is.null(shape.data)
color.data != shape.data
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size)
dt.scaled.pc
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(rows = name.Y, cols = name.X)
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X)
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "free", space = "free")
?facet_grid
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed")
lab.PC[1]
lab.PC
color.data != shape.data
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed",
labeller = labeller(name.Y = lab.PC, name.X = lab.PC))
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed",
labeller = labeller(name.Y = lab.PC))
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed",
labeller = labeller(name.Y = as_labeller(lab.PC)))
lab.PC
list(lab.PC)
as.list(lab.PC)
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed",
labeller = labeller(name.Y = as_labeller(as.list(lab.PC))))
#Create labellers
labelr <- as.list(lab.PC)
PC
names(labelr) <- PC
labelr
labelr <- as.list(lab.PC)
names(labelr) <- PC
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed",
labeller = labeller(name.Y = as_labeller(labelr)))
dt.scaled.pc
dt.scaled.pc$PCx
dt.scaled.pc$name.X
as.factor(dt.scaled.pc$name.X)
dt.scaled.pc[, c("name.X", "name.Y") := .(as.factor(name.X), as.factor(name.Y))]
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed",
labeller = labeller(name.Y = as_labeller(labelr)))
?labeller
dt.scaled.pc$name.X
dt.scaled.pc$name.Y
dt.scaled.pc
lab.PC
dt.scaled.pc[, c("name.X", "name.Y") := .(
factor(name.X, levels = lab.PC), factor(name.Y, levels = lab.PC))]
dt.scaled.pc
dt.scaled.pc <- rbindlist(l = ls.dt.scaled, use.names = FALSE)
setnames(x = dt.scaled.pc, old = 1, new = "PCy")
setnames(x = dt.scaled.pc, old = 2, new = "PCx")
cols <- c("name.X", "PCx", "name.Y", "PCy", colnames(dt.annot))
dt.scaled.pc <- dt.scaled.pc[, ..cols, ]
dt.scaled.pc[, c("name.X", "name.Y") := .(
as.factor(name.X), as.factor(name.Y))]
dt.scaled.pc
dt.scaled.pc$name.X
setattr(dt.scaled.pc$name.X, "levels", lab.PC)
dt.scaled.pc$name.X
setattr(dt.scaled.pc$name.Y, "levels", lab.PC)
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "fixed", space = "fixed")
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "free", space = "fixed") +
labs(shape = color.data, color = color.data)
biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "free", space = "fixed") +
labs(shape = color.data, color = color.data)
color.data
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
facet_grid(name.Y ~ name.X, scales = "free", space = "fixed") +
labs(shape = color.data, color = color.data)
biplt + geom_segment(
data = loadings.data, mapping = aes(x = 0, y = 0, xend = PCx, yend = PCy),
arrow = grid::arrow(length = grid::unit(8, "points")),
colour = loadings.col)
loadings.col = "red"
biplt + geom_segment(
data = loadings.data, mapping = aes(x = 0, y = 0, xend = PCx, yend = PCy),
arrow = grid::arrow(length = grid::unit(8, "points")),
colour = loadings.col)
loadings.data
loadings.data[, c("name.X", "name.Y") := .(
as.factor(name.X), as.factor(name.Y))]
setattr(loadings.data$name.X, "levels", lab.PC)
setattr(loadings.data$name.Y, "levels", lab.PC)
biplt + geom_segment(
data = loadings.data, mapping = aes(x = 0, y = 0, xend = PCx, yend = PCy),
arrow = grid::arrow(length = grid::unit(8, "points")),
colour = loadings.col)
biplt + geom_segment(
data = loadings.data, mapping = aes(x = 0, y = 0, xend = PCx, yend = PCy),
arrow = grid::arrow(length = grid::unit(8, "points")),
colour = loadings.col) +
ggrepel::geom_label_repel(
data = loadings.data, mapping = aes(x = PCx, y = PCy, label = labels),
size = 3)
devtools::document()
devtools::install()
