#'
#' @param prcomp.res         A \code{prcomp} object resulting from the
#'                           stats::prcomp().
#' @param data               A \code{data.table} containing all the matching
#'                           data related to the principal component analysis.
#' @param PCx                An \code{integer} matching the principal component
#'                           values to display on X-axis.
#' @param PCy                An \code{integer} matching the principal component
#'                           values to display on Y-axis.
#' @param scale              A \code{double} scaling parameter, disabled by 0.
#' @param point.size         A \code{double} specifying the size of points.
#' @param color.data         A \code{character} specifying the column name in
#'                           'data' to be used to map colors to points.
#' @param shape.data         A \code{character} specifying the column name in
#'                           'data' to be used to map shapes to points.
#' @param scale.color.manual A \code{character} vector specifying a palette of
#'                           colors, matching the number of categories specified
#'                           in 'color.data'.
#' @param scale.shape.manual A \code{character} vector specifying point shapes,
#'                           matching the number of categories specified in
#'                           'shape.data'.
#' @param loadings           A \code{logical} specifying whether the loadings
#'                           should be displayed (TRUE) or not (FALSE).
#' @param loadings.col       A \code{character} specifying a color to be used
#'                           for loadings.
#' @param top.load.by.quad   An \code{integer} specifying the top n most
#'                           important loadings to be displayed in the four
#'                           quadrants of the biplot graph (by quadrants). This
#'                           parameters allows to display only the most
#'                           important loadings, and to hide the less important
#'                           ones, to improve visibility when there is too many
#'                           of them.
#' @param load.above.x       A \code{double} specifying the minimum value of the
#'                           X-coordinate for loadings to be displayed on the
#'                           plot.
#' @param load.above.y       A \code{double} specifying the minimum value of the
#'                           Y-coordinate for loadings to be displayed on the
#'                           plot.
#' @param load.below.x       A \code{double} specifying the maximum value of the
#'                           X-coordinate for loadings to be displayed on the
#'                           plot.
#' @param load.below.y       A \code{double} specifying the maximum value of the
#'                           Y-coordinate for loadings to be displayed on the
#'                           plot.
#' @return A \code{gg} plot of a PCA biplot.
#' @author Yoann Pageaud.
#' @export
#' @examples
#' #Draw the simplest biplot of PC1 and PC2:
#' pca.res <- prcomp(iris[,-5])
#' ggbipca(prcomp.res = pca.res, data = iris)
#' #Draw a biplot of PC2 and PC3:
#' ggbipca(prcomp.res = pca.res, data = iris, PCx = 2, PCy = 3)
#' #Change data scale:
#' ggbipca(prcomp.res = pca.res, data = iris, scale = 2)
#' #Change points size:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2)
#' #Color points following Species:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species")
#' #Change points shape following Species:
#' # (could use any other categorical / ordinal value if others available)
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species", shape.data = "Species")
#' #Map custom colors:
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange"))
#' #Map custom point shapes:
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species",
scale.shape.manual = ) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
#' #Show loadings:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species", shape.data = "Species",
#'         scale.color.manual = c("green", "red", "orange"),
#'         scale.shape.manual = c(83, 8, 25), loadings = TRUE)
#' #Change loadings color:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species", shape.data = "Species",
#'         scale.color.manual = c("green", "red", "orange"),
#'         scale.shape.manual = c(83, 8, 25), loadings = TRUE,
#'         loadings.col = "purple")
#' #Display the top 1 loading in each quadrant:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species", shape.data = "Species",
#'         scale.color.manual = c("green", "red", "orange"),
#'         scale.shape.manual = c(83, 8, 25), loadings = TRUE,
#'         loadings.col = "purple", top.load.by.quad = 1)
#' #Display loadings for which X-coordinates are above 0.05 and Y-coordinates are
#' # above 0:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species", shape.data = "Species",
#'         scale.color.manual = c("green", "red", "orange"),
#'         scale.shape.manual = c(83, 8, 25), loadings = TRUE,
#'         loadings.col = "purple", load.above.x = 0.05, load.above.y = 0)
#' #Display top 1 loading in each quadrant, for which X-coordinates are above 0.1:
#' ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
#'         color.data = "Species", shape.data = "Species",
#'         scale.color.manual = c("green", "red", "orange"),
#'         scale.shape.manual = c(83, 8, 25), loadings = TRUE,
#'         loadings.col = "purple", top.load.by.quad = 1, load.above.x = 0.1)
#' @references
#' \itemize{
#'  \item{\href{https://cran.r-project.org/web/packages/ggfortify/index.html}{ggfortify: Data Visualization Tools for Statistical Analysis Results}}
#'  \item{\href{https://cran.r-project.org/web/packages/ggfortify/vignettes/plot_pca.html}{ggfortify: Plotting PCA (Principal Component Analysis)}}
#'  \item{\href{https://stats.stackexchange.com/questions/143905/loadings-vs-eigenvectors-in-pca-when-to-use-one-or-another}{Loadings vs eigenvectors in PCA: when to use one or another?}}
#'  \item{\href{https://stats.stackexchange.com/questions/119746/what-is-the-proper-association-measure-of-a-variable-with-a-pca-component-on-a/}{What is the proper association measure of a variable with a PCA component?}}
#' }
#TODO: Remove scale.manual.shape & scale.manual.color (give possibility to add it manually after the function the ggplot2 way).
ggbipca <- function(
prcomp.res, data, PCx = 1, PCy = 2, scale = 1, point.size = 1,
color.data = NULL, shape.data = NULL, loadings = FALSE, loadings.col = "red",
top.load.by.quad = NULL, load.above.x = NULL, load.above.y = NULL,
load.below.x = NULL, load.below.y = NULL){
#Duplicate data.table
dt.annot <- as.data.table(as.data.frame(data))
#Make PC names vector
PC <- paste0("PC", c(PCx, PCy))
#Rename annotation column used for points colors and shapes
if(!is.null(color.data)){
if(color.data %in% colnames(dt.annot)){
setnames(x = dt.annot, old = color.data, new = "color.data")
if(is.null(levels(dt.annot$color.data))){
dt.annot[, color.data := as.factor(color.data)]
}
} else { stop("'color.data' does not match any column name in 'data'.") }
}
if(!is.null(shape.data)){
if(shape.data != color.data){
if(shape.data %in% colnames(dt.annot)){
setnames(x = dt.annot, old = shape.data, new = "shape.data")
if(is.null(levels(dt.annot$shape.data))){
dt.annot[, shape.data := as.factor(shape.data)]
}
} else { stop("'shape.data' does not match any column name in 'data'.") }
}
}
#Check length of scale.shape.manual & scale.color.manual match levels of
# shape.data & color.data respectively
# if(!is.null(scale.color.manual) & !is.null(color.data)){
#   if(length(scale.color.manual) != length(levels(dt.annot$color.data))){
#     stop("'scale.color.manual' color palette length doesn't match 'color.data' levels.")
#   }
# }
# if(!is.null(scale.shape.manual) & !is.null(shape.data)){
#   if(is.double(scale.shape.manual)){
#     if(shape.data != color.data){
#       if(length(scale.shape.manual) != length(levels(dt.annot$shape.data))){
#         stop("'scale.shape.manual' length doesn't match 'shape.data' levels.")
#       }
#     } else {
#       if(length(scale.shape.manual) != length(levels(dt.annot$color.data))){
#         stop("'scale.shape.manual' length doesn't match 'shape.data' levels.")
#       }
#     }
#   } else { stop("Unsupported values for point shape.") }
# }
#Get sdev from selected PCs
lam <- prcomp.res$sdev[c(PCx, PCy)]
#Create scaling factor
lam <- lam * sqrt(nrow(prcomp.res$x))
lam <- lam^scale
#Scale PCA data
dt.scaled.pc <- as.data.table(t(t(prcomp.res$x[, PC])/lam))
dt.scaled.pc <- cbind(dt.scaled.pc, dt.annot)
setnames(x = dt.scaled.pc, old = PC[1], new = "PCx")
setnames(x = dt.scaled.pc, old = PC[2], new = "PCy")
#Calculate the percentage of variability explained by the principal component
ve <- prcomp.res$sdev^2/sum(prcomp.res$sdev^2)
lab.PC <- paste0(PC, " (", round(ve[c(PCx, PCy)] * 100, 2), "%)")
#Get loadings data for PCx & PCy
if(loadings){
loadings.data <- as.data.table(
prcomp.res$rotation, keep.rownames = "labels")[, c("labels", PC),
with = FALSE]
setnames(x = loadings.data, old = PC[1], new = "PCx")
setnames(x = loadings.data, old = PC[2], new = "PCy")
#Define scale for plot data and loadings based on selected PCs
scaler <- min(
max(abs(dt.scaled.pc[["PCx"]]))/max(abs(loadings.data[["PCx"]])),
max(abs(dt.scaled.pc[["PCy"]]))/max(abs(loadings.data[["PCy"]])))
loadings.data[, 2:3 := lapply(
X = .SD, FUN = function(i){ i * scaler * 0.8 }), .SDcols = c(2, 3)]
if(!is.null(top.load.by.quad)){
#Compute loadings length
loadings.data[, load.sqrd.length := PCx^2 + PCy^2]
#Assign quadrants
loadings.data[PCx >= 0 & PCy >= 0, quadrant := "top-right"]
loadings.data[PCx >= 0 & PCy < 0, quadrant := "bottom-right"]
loadings.data[PCx < 0 & PCy < 0, quadrant := "bottom-left"]
loadings.data[PCx < 0 & PCy >= 0, quadrant := "top-left"]
#Keep top N longest arrows by quadrant
loadings.data <- loadings.data[order(quadrant, -load.sqrd.length)]
loadings.data <- loadings.data[, head(.SD, top.load.by.quad),
by = quadrant]
}
#Subset the loadings displayed if some cut-off
if(!is.null(load.above.x) | !is.null(load.below.x)){
if(!is.null(load.above.x) & is.null(load.below.x)){
loadings.data <- loadings.data[PCx >= load.above.x]
} else if(!is.null(load.below.x) & is.null(load.above.x)){
loadings.data <- loadings.data[PCx <= load.below.x]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
if(!is.null(load.above.y) | !is.null(load.below.y)){
if(!is.null(load.above.y) & is.null(load.below.y)){
loadings.data <- loadings.data[PCy >= load.above.y]
} else if(!is.null(load.below.y) & is.null(load.above.y)){
loadings.data <- loadings.data[PCy <= load.below.y]
} else {
stop("Cannot process contradictory conditions on loadings display.")
}
}
}
#Make PCA ggplot
biplt <- ggplot() +
theme(axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid = element_line(colour = "grey"),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
legend.key = element_blank())
if(!is.null(color.data) & is.null(shape.data)){
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data), size = point.size) +
labs(x = lab.PC[1], y = lab.PC[2], color = color.data)
} else if(!is.null(color.data) & !is.null(shape.data)){
if(color.data != shape.data){
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = shape.data),
size = point.size) +
labs(
x = lab.PC[1], y = lab.PC[2], shape = shape.data, color = color.data)
} else {
biplt <- biplt +
#Draw sample distribution
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, color = color.data, shape = color.data),
size = point.size) +
labs(
x = lab.PC[1], y = lab.PC[2], shape = color.data, color = color.data)
}
} else if(is.null(color.data) & is.null(shape.data)){
biplt <- biplt +
geom_point(data = dt.scaled.pc, mapping = aes(x = PCx, y = PCy),
color = "black", size = point.size) +
labs(x = lab.PC[1], y = lab.PC[2])
} else if(is.null(color.data) & !is.null(shape.data)){
biplt <- biplt +
geom_point(data = dt.scaled.pc, mapping = aes(
x = PCx, y = PCy, shape = shape.data),
color = "black", size = point.size) +
labs(x = lab.PC[1], y = lab.PC[2], shape = shape.data)
}
# if(!is.null(scale.color.manual)){
#   biplt <- biplt + scale_color_manual(values = scale.color.manual)
# }
# if(!is.null(scale.shape.manual)){
#   biplt <- biplt + scale_shape_manual(values = scale.shape.manual)
# }
#Draw loadings
if(loadings){
biplt <- biplt + geom_segment(
data = loadings.data, mapping = aes(x = 0, y = 0, xend = PCx, yend = PCy),
arrow = grid::arrow(length = grid::unit(8, "points")),
colour = loadings.col) +
ggrepel::geom_label_repel(
data = loadings.data, mapping = aes(x = PCx, y = PCy, label = labels),
size = 3)
}
#Return PCA biplot
return(biplt)
}
ggbipca(prcomp.res = pca.res, data = iris)
ggbipca(prcomp.res = pca.res, data = iris, PCx = 2, PCy = 3)
ggbipca(prcomp.res = pca.res, data = iris, scale = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2, color.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2, color.data = "Species", shape.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange"))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species",
scale.shape.manual = ) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
devtools::document()
setwd("/home/yoann/BiocompR/")
devtools::document()
devtools::install()
pca.res <- prcomp(iris[,-5])
ggbipca(prcomp.res = pca.res, data = iris)
library(BiocompR)
ggbipca(prcomp.res = pca.res, data = iris)
ggbipca(prcomp.res = pca.res, data = iris, PCx = 2, PCy = 3)
ggbipca(prcomp.res = pca.res, data = iris, scale = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2)
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species")
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange"))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species") +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple") +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple", top.load.by.quad = 1) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple", load.above.x = 0.05, load.above.y = 0) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
ggbipca(prcomp.res = pca.res, data = iris, point.size = 2,
color.data = "Species", shape.data = "Species", loadings = TRUE,
loadings.col = "purple", top.load.by.quad = 1, load.above.x = 0.1) +
scale_color_manual(values = c("green", "red", "orange")) +
scale_shape_manual(values = c(83, 8, 25))
##IMPORTS
setwd("/media/yoann/Disque Dur 4/PhD/Brors_Lab/")
Imports = c("data.table", "ggplot2", "ggfortify", "BiocompR", "ggsci")
invisible(lapply(Imports, library, character.only = T))
source("PCAWG_Paper/src/handle_PCAWG_cohorts.R")
source("PCAWG_Paper/src/funRDS.R")
##PARAMETERS
#Load cohort QC matrices
ls.mQC <- readRDSls(dirRDS = "PCAWG_Paper/data/QC_dataset/")
#Load annotation for the intensities measured.
QC.annot <- fread(file = "PCAWG_Paper/data/QC_dataset/QC_annotation.csv")
#Load palette
# palette <- colorRampPalette(colors = pal_npg("nrc", alpha = 1)(10))(27)
palette <- c(pal_npg("nrc", alpha = 1)(10),pal_npg("nrc", alpha = 1)(10),pal_npg("nrc", alpha = 1)(7))
##ANALYSIS
#Merge data matrices into a data.table
QC.dt <- as.data.table(do.call(cbind, ls.mQC))
#Bring annotation with data
QC.dt <- cbind(QC.annot, QC.dt)
#Remove empty rows
QC.dt <- QC.dt[!apply(X = apply(
X = QC.dt[, -c(1:11), ], MARGIN = 1, FUN = is.na), MARGIN = 2, FUN = all), ]
QC.dt[, Target := as.factor(Target)]
#Compute PCA
# pca_res <- prcomp(QC.dt[, -c(1:11), ], scale. = TRUE)
pca_res <- prcomp(QC.dt[, -c(1:11), ], scale. = FALSE)
# autoplot() on target types ###################################################
# autoplot(object = pca_res, data = QC.dt, colour = "Channel", shape = "Target",
#          size = 3, scale = 1, loadings = TRUE, loadings.label = TRUE,
#          loadings.label.size = 3, loadings.label.colour = "black") +
#   scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84)) +
#   scale_color_manual(values = c("#00ff00", "red"))
# ggbipca() on target types ####################################################
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
warn.handle(
pattern = "unlabeled data points \\(too many overlaps\\). Consider increasing max.overlaps",
print(target.biplot))
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
target.biplot
melt.QC.dt <- melt(
QC.dt, id.vars = colnames(QC.dt)[1:11], variable.name = "Samples")
t.QC.dt <- dcast(melt.QC.dt, formula = Samples ~ Channel + Description)
#Load Sample annotations
sample.annotation <- make_cohorts_annotations(
pcawg.csv = "PCAWG4_Methylation_Metadata/PCAWG4_ICGC_TCGA.csv",
idat_folder = "PCAWG_Paper/data/HM450K_idat/OV-AU_idats/")
sample.annotation <- rbindlist(l = sample.annotation, idcol = "Cohorts")
#Merge sample annotation with t.QC.dt
t.QC.dt <- merge(x = sample.annotation, y = t.QC.dt, by.x = "ID",
by.y = "Samples", all.y = TRUE)
pca_t.res <- prcomp(t.QC.dt[, -c(1:6), ], scale. = FALSE)
ggbipca(prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
top.load.by.quad = 5, color.data = "Cohorts", shape.data = "Cohorts",
scale.shape.manual = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17),
point.size = 2.5) +
scale_color_manual(values = palette)
ggbipca(prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
top.load.by.quad = 5, color.data = "Cohorts", shape.data = "Cohorts",
point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_QCprobes_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
sample.biplot <- ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE, top.load.by.quad = 5,
color.data = "Cohorts", shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
sample.biplot
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Samples_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = sample.biplot, device = "pdf", width = 9.92, height = 6.09)
ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "blue", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "black", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
sample.biplot <- ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "black", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = sample.biplot, device = "pdf", width = 9.92, height = 6.09)
ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
target.biplot <- ggbipca(
prcomp.res = pca_res, data = QC.dt, PCx = 1, PCy = 2, color.data = "Channel",
shape.data = "Target", point.size = 3, loadings = TRUE, top.load.by.quad = 5,
loadings.col = "blue") +
scale_color_manual(values = c("#00ff00", "red")) +
scale_shape_manual(values = c(66,66,69,72,25,78,88,88,88,88,83,83,8,84))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_QCprobes_HM450_PCAWG.pdf",
plot = target.biplot, device = "pdf", width = 9.92, height = 6.09)
sample.biplot <- ggbipca(
prcomp.res = pca_t.res, data = t.QC.dt, loadings = TRUE,
loadings.col = "black", top.load.by.quad = 5, color.data = "Cohorts",
shape.data = "Cohorts", point.size = 2.5) +
scale_color_manual(values = palette) +
scale_shape_manual(values = c(
16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17,18,3,4,6,8,16,15,17))
ggsave(
filename = "/media/yoann/Disque Dur 4/PhD/Brors_Lab/PCAWG_Paper/graphs/PCA_Biplots/PCA_Samples_HM450_PCAWG.pdf",
plot = sample.biplot, device = "pdf", width = 9.92, height = 6.09)
setwd("/home/yoann/BiocompR/")
devtools::document()
devtools::install()
install.packages(c("cachem", "cli", "crayon", "data.table", "dotCall64", "farver", "foreign", "gert", "Hmisc", "lifecycle", "MASS", "mgcv", "mime", "nlme", "pillar", "pkgload", "promises", "ps", "RcppArmadillo", "RcppParallel", "spatial", "testthat", "tibble", "usethis", "waldo", "xfun"))
install.packages(c("foreign", "MASS", "mgcv", "nlme", "spatial"))
devtools::document
devtools::document()
devtools::install()
library(BiocompR)
load.palettes()
?load.palettes()
