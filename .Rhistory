epi.location("/home/yoann/Téléchargements/Databanks")
## Targeted databanks in EpiAnnotator
DATABANKS <- setdiff(dir(epi.location()), "distances")
## File containing the annotation table of the Infinium 450k (HumanMethylation450) assay
PLATFORMS <- c("HumanMethylation450" = "probes450", "MethylationEPIC" = "probesEPIC")
## File storing the MethylationEPIC manifest for hg38
FILE.EPIC.HG38 <- "/media/yoann/PAGEAUD Y4/Compute Distances for databanks/EPIC.anno.GRCh38.tsv.gz"
## F U N C T I O N S ###################################################################################################
get.platform.table <- function(platform.name, targeted.assembly) {
if (platform.name == "MethylationEPIC" && targeted.assembly == "hg38") {
## Get MethylationEPIC is not available for hg38 in RnBeads
tbl <- read.delim(FILE.EPIC.HG38, check.names = FALSE, stringsAsFactors = FALSE)
tbl <- tbl[, c("probeID", "chrm", "start")]
tbl[, 3] <- tbl[, 3] + 1L
} else {
## Attempt to get the other platforms from RnBeads
tbl <- tryCatch(
rnb.get.annotation(PLATFORMS[platform.name], targeted.assembly),
error = function(err) { NULL })
if (is.null(tbl)) {
return(NULL)
}
tbl <- rnb.annotation2data.frame(tbl)[, c("ID", "Chromosome", "Start")]
tbl[, 2] <- as.character(tbl[, 2])
}
colnames(tbl) <- c("ID", "Chromosome", "Location")
tbl
}
## M A I N #############################################################################################################
for (databank in DATABANKS) {
targeted.assembly <- gsub("^(.+)_([a-z0-9]+)$", "\\2", databank)
for (platform.name in names(PLATFORMS)) {
txt <- paste0("%", max(nchar(names(PLATFORMS))), "s for %", max(nchar(DATABANKS)), "s: ")
cat(sprintf(txt, platform.name, databank))
if (platform.name %in% epi.get.platforms(databank)) {
cat("already present.\n")
next
}
p.annotation <- get.platform.table(platform.name, targeted.assembly)
if (is.null(p.annotation)) {
cat("not available.\n")
next
}
cat("running... ")
suppressWarnings(suppressMessages(epi.create.platform(p.annotation, platform.name, databank)))
rm(p.annotation)
cat("done.\n")
}
}
rm(databank, targeted.assembly, platform.name, txt)
install.packages(c("data.table", "glue", "lazyeval", "Rcpp", "rlang", "rmarkdown", "R.utils", "stringi", "withr"))
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
x  = matrix(runif(40), nrow=4, ncol=10)
x
f2 = factor(floor(runif(ncol(x))*2))
f2
ncol(x)
runif(ncol(x))
runif(ncol(x))*2
floor(runif(ncol(x))*2)
floor(runif(ncol(x))*2)
r2 = rowttests(x, f2)
library(genefilter)
r2 = rowttests(x, f2)
r2
r2 = rowttests(x, f2,tstatOnly = T)
r2
r2 <- rowttests(x, f2)$p.value
r2
f2
x[1,]
grp1<-x[1,c(1,2,4,6,7,9)]
grp1
grp0<-x[1,c(3,5,8,10)]
grp0
t.test(grp1,grp0)
r2
t.test(grp1,grp0,paired = F)
t.test(grp1,grp0,paired = F,var.equal = T)
grp1<-x[2,c(1,2,4,6,7,9)]
grp0<-x[2,c(3,5,8,10)]
t.test(grp1,grp0,paired = F,var.equal = T)
r2
x
r2 <- colttests(x, f2)$p.value
f2 = factor(floor(runif(nrow(x))*2))
r2 <- colttests(x, f2)$p.value
r2
f2
"E"*4
test<-read.table("/home/yoann/Téléchargements/ENCFF556SCA.bed")
head(test)
unique(test$V9)
cat(unique(test$V9))
names(unique(test$V9)
)
name(unique(test$V9))
unname(unique(test$V9))
levels(unique(test$V9))
shiny::runApp('/media/yoann/PAGEAUD Y4/2018-03-Hematopoietic-DNMT1/analysis/002-report-statistics')
runApp('/media/yoann/PAGEAUD Y4/2018-03-Hematopoietic-DNMT1/analysis/002-report-statistics')
runApp('/media/yoann/PAGEAUD Y4/2018-03-Hematopoietic-DNMT1/analysis/002-report-statistics')
install.packages(c("backports", "BH", "bindr", "cowplot", "DBI", "digest", "DT", "foreach", "htmlwidgets", "httpuv", "iterators", "knitr", "matrixStats", "Rcpp", "RCurl", "reshape2", "rgl", "rlang", "rmarkdown", "rprojroot", "shinyjs", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "bindr", "cowplot", "DBI", "digest", "DT", "foreach", "htmlwidgets", "httpuv", "iterators", "knitr", "matrixStats", "Rcpp", "RCurl", "reshape2", "rgl", "rlang", "rmarkdown", "rprojroot", "shinyjs", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "bindr", "cowplot", "DBI", "digest", "DT", "foreach", "htmlwidgets", "httpuv", "iterators", "knitr", "matrixStats", "Rcpp", "RCurl", "reshape2", "rgl", "rlang", "rmarkdown", "rprojroot", "shinyjs", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "XML", "xml2", "yaml"))
shiny::runApp('/media/yoann/PAGEAUD Y4/2018-03-Hematopoietic-DNMT1/analysis/002-report-statistics')
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("bsseq")
install.packages("VennDiagram")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
install.packages("circlize")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
install.packages("doParallel")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DSS")
install.packages("pryr")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("org.Mm.eg.db")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("TxDb.Mmusculus.UCSC.mm10.knownGene")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Mmusculus.UCSC.mm10")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
install.packages("tidyverse")
install.packages(c("broom", "caTools", "circlize", "cowplot", "dbplyr", "dplyr", "evaluate", "fpc", "GetoptLong", "ggplot2", "ggpubr", "GlobalOptions", "glue", "gtools", "haven", "highr", "httpuv", "iterators", "kernlab", "later", "manipulateWidget", "matrixStats", "mclust", "modeltools", "munsell", "openssl", "pillar", "pkgconfig", "processx", "Rcpp", "RCurl", "reprex", "rjson", "rlang", "rmarkdown", "robustbase", "roxygen2", "scales", "stringi", "trimcluster", "XML", "yaml"))
install.packages(c("callr", "cli", "data.table", "digest", "doParallel", "ggpubr", "later", "pkgbuild", "reprex", "robustbase", "R.utils", "snow", "tinytex", "xtable"))
library(annotate)
detach("package:BiocGenerics", unload=TRUE)
library(GenomicRanges)
library(S4Vectors)
library("S4Vectors", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
checkCRAN()
library(ggsci)
library(HDF5Array)
library(knitr)
library(annotate)
remove.packages("Biobase", lib="~/R/x86_64-pc-linux-gnu-library/3.5")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("Biobase")
library(annotate)
library(ggplot2)
library(DeepBlueR)
library(doParallel)
library(knitr)
library(magrittr)
library(RSQLite)
library(rtracklayer)
18.50+25+19.50
/3
63/3
list_early<-read.table("list_early.txt")
install.packages("data.table")
library(data.table)
list_early<-fread("list_early.txt")
list_early
list_early<-fread("list_early.txt",sep = "\n")
list_early
list_early<-fread("list_early.txt",sep = "\n",header = FALSE)
list_early
as.vector(list_early)
c(list_early)
c(list_early)
list_film<-fread("list_film.txt",sep = "\n",header = FALSE)
list_early
list_early[["V1"]]
list_early<-list_early[["V1"]]
list_film<-list_film[["V1"]]
list_film[list_film %in% list_early]
list_film[!list_film %in% list_early]
list_early[!list_early %in% list_film]
list_film[!list_film %in% list_early]
getwd()
list.dirs("/run/user/1000/gvfs/sftp:host=88.191.247.11,user=sns/mnt/disk4/Early_Access_Movies")
list.dirs("/run/user/1000/gvfs/sftp:host=88.191.247.11,user=sns/mnt/disk4/Early_Access_Movies",full.names = F)
list_early<-list.dirs("/run/user/1000/gvfs/sftp:host=88.191.247.11,user=sns/mnt/disk4/Early_Access_Movies",full.names = F)
list_early
as.data.frame(list_early)
library(data.table)
as.data.table(list_early)
fwrite(as.data.table(list_early),col.names = F,file = "list_early.txt")
list_film<-list.dirs("/media/yoann/Disque Dur 3/Film/",full.names = F)
list_film
as.data.table(list_film)
fwrite(as.data.table(list_film),col.names = F,file = "list_.txt")
list_film
fwrite(as.data.table(list_film),col.names = F,file = "list_film.txt")
test<-fread("list_early.txt")
test
test<-fread("list_early.txt",sep = "\n")
test
list_early<-fread("list_early.txt",sep = "\n")
list_film<-fread("list_film.txt",sep = "\n")
list_film
list_film<-fread("list_film.txt",sep = "\n",header = F)
list_early<-fread("list_early.txt",sep = "\n",header = F)
list_film
list_film$V1 %in% list_early$V1
list_film$V1[list_film$V1 %in% list_early$V1]
list_film$V1[!list_film$V1 %in% list_early$V1]
list_early$V1[!list_early$V1 %in% list_film$V1]
##IMPORTS
Imports = c("ggplot2","data.table")
lapply(Imports, library, character.only = T)
source("src/bin_polygons.R")
install.packages("ggplot2")
##IMPORTS
Imports = c("ggplot2","data.table")
lapply(Imports, library, character.only = T)
source("src/bin_polygons.R")
setwd("BiocompR/src/")
##IMPORTS
Imports = c("ggplot2","data.table")
lapply(Imports, library, character.only = T)
source("src/bin_polygons.R")
setwd("BiocompR/")
setwd("/home/yoann/BiocompR/")
##IMPORTS
Imports = c("ggplot2","data.table")
lapply(Imports, library, character.only = T)
source("src/bin_polygons.R")
dummy.complete = data.frame(
Samples=rep(paste0("Sample",c(1:6)),each = 1000),
Groups=rep(c('A','B','C'),each = 2000),
Conditions=rep(c('I','J'),each = 1000,3),
Values=c(rnorm(1000,0), rnorm(1000, 0.5),
rnorm(1000, 3), rnorm(1000, 3.5),
rnorm(1000,-3), rnorm(1000, -3.5)),
"Function(2ndVar)" = rep(rep(x =c(60,50,40,30,20,10,30,40,50,60),each=100),6))
ggcraviola<-function(data, fill.color=c("blue","red"), craviola.width = 1,
boxplots = TRUE, boxplot.width=0.04, mean.value = TRUE,
bins=FALSE, bins.quantiles=seq(0.1,0.9,0.1), bin.fun="sd",
lines.col = NA){
#Check if data is a data.table and convert if not
if (!is.data.table(data)){data<-as.data.table(data)}
#Make annotation table
if (ncol(data) < 4){
if (nrow(data[!duplicated(data[[1]])]) == 2) {
if(is.factor(data[!duplicated(data[[1]])][[1]])){
Annot.table<-data.table("Samples"=data[!duplicated(data[[1]])][[1]],
"Groups"=as.factor(c(1,1)),
"Conditions"=data[!duplicated(data[[1]])][[1]],
data[!duplicated(data[[1]]),2])
colnames(data)[1]<-"Samples"
data<-merge(x = Annot.table[,-4],y = data,by="Samples",all.y=TRUE)
} else {
stop("Column 1 in data is not of type 'factor'.")
}
} else{
stop("Missing columns in the data provided.")
}
} else {
Annot.table<-data[!duplicated(data[[1]]),1:3]
}
if(length(unique(Annot.table[[3]])) > 2){
stop("More than 2 conditions inputed. Only 2 conditions tolerated.")
} else {
original.var.col<-levels(Annot.table[[3]])
if (length(levels(Annot.table[[3]])) > 2) {
stop("More levels than possible values. Only 2 conditions tolerated. Remove the excess levels.")
} else {
levels(Annot.table[[3]])[1]<-"1"
levels(Annot.table[[3]])[2]<-"2"
}
}
if (length(Annot.table[[1]]) < length(levels(Annot.table[[1]]))){
stop("More levels than matching values found in column 1 of data.")
}
amount.grp<-length(unique(Annot.table[[2]]))
if(amount.grp > 1){
invisible(lapply(seq_along(unique(Annot.table[[2]])), function(i){
levels(Annot.table[[2]])[i]<<- i
}))
}
mylist_data<-split(data,f = data[[1]])
list_val1<-lapply(mylist_data,subset, select = 4)
list_vect.val1<-lapply(list_val1,unlist)
#Create stats plots
list.bp.stat<-lapply(seq_along(list_vect.val1),function(i){
qiles<-quantile(list_vect.val1[[i]])
means<-mean(list_vect.val1[[i]])
if(Annot.table[Annot.table[[1]] == names(list_vect.val1)[i],3] == 1){
x.pos <- -boxplot.width
} else { x.pos <- boxplot.width }
if(Annot.table[Annot.table[[1]] == names(list_vect.val1)[i],2] != 1){
x.pos<-x.pos + (as.integer(Annot.table[Annot.table[[1]] ==
names(list_vect.val1)[i],2])-1)
}
data.frame(Var.col = Annot.table[Annot.table[[1]] ==
names(list_vect.val1)[i],3],
x=x.pos, min = qiles[1], low=qiles[2], mid=qiles[3],
top=qiles[4], max = qiles[5],mean = means,
pos.crav = round(x.pos))
})
box.dframe<-do.call(rbind, list.bp.stat)
#Create Craviola plot
list_dens.res<-lapply(list_vect.val1,density)
list_dens.df<-lapply(list_dens.res, function(i){
data.frame(y.pos=i$x, dens.curv = i$y*craviola.width)
})
list_oriented_dens<-lapply(seq_along(list_dens.df),function(i){
if(Annot.table[Annot.table[[1]] == names(list_dens.df)[i],3] == 1){
list_dens.df[[i]]$dens.curv<<-list_dens.df[[i]]$dens.curv * -1
list_dens.df[[i]]
} else { list_dens.df[[i]] }
if(Annot.table[Annot.table[[1]] == names(list_dens.df)[i],2] != 1){
list_dens.df[[i]]$dens.curv<<-list_dens.df[[i]]$dens.curv +
(as.integer(Annot.table[Annot.table[[1]] ==
names(list_dens.df)[i],2]) - 1)
list_dens.df[[i]]
} else { list_dens.df[[i]] }
})
#Remove density values outside the extrema
xtrems<-ls.quantile(ls = list_vect.val1, qtiles = c(0,1))
bined.xtrm.dens<-bin.polygons(list_oriented_dens = list_oriented_dens,
list.quant.lim = xtrems,Annot.table = Annot.table)
#Keep only bin 1 for each sample
list_oriented_dens<-lapply(seq_along(bined.xtrm.dens), function(i){
df<-bined.xtrm.dens[[i]][bined.xtrm.dens[[i]]$bin == 1,c(2,3)]
rownames(df)<-NULL
df
})
names(list_oriented_dens)<-names(list_dens.df)
#Create Bins based on a third variable
if(bins){ #Create bin polygons
#Bin polygons
list.quant.lim<-ls.quantile(ls = list_vect.val1, qtiles = bins.quantiles)
list.dfs<-bin.polygons(list_oriented_dens = list_oriented_dens,
list.quant.lim = list.quant.lim,
Annot.table = Annot.table)
#Calculate average value on 3rd variable for each bin
list.fun.val2<-lapply(seq_along(list.quant.lim), function(i){
smpl.data<-data[data[[1]] == names(list.quant.lim)[i],]
# Check if external quantiles are min and max
if(min(list_vect.val1[[i]]) != list.quant.lim[[i]][1]){
# Add minimum value at the beginning of the vector
list.quant.lim[[i]]<<-c(min(list_vect.val1[[i]]),list.quant.lim[[i]])
}
if(max(list_vect.val1[[i]]) != rev(list.quant.lim[[i]])[1]){
# Add maximum value at the end of the vector
list.quant.lim[[i]]<<-c(list.quant.lim[[i]],max(list_vect.val1[[i]]))
}
smpl.data[["bin.groups"]]<-findInterval(smpl.data[[4]],
list.quant.lim[[i]],
all.inside = T)-1
if(bin.fun == "mean"){
unlist(lapply(sort(unique(smpl.data$bin.groups)), function(j){
mean(smpl.data[smpl.data$bin.groups == j][[5]],na.rm = T)
}))
} else if(bin.fun == "sd"){
unlist(lapply(sort(unique(smpl.data$bin.groups)), function(j){
sd(smpl.data[smpl.data$bin.groups == j][[5]],na.rm = T)
}))
} else if(bin.fun == "mad"){
unlist(lapply(sort(unique(smpl.data$bin.groups)), function(j){
mad(smpl.data[smpl.data$bin.groups == j][[5]],na.rm = T)
}))
} else {
stop("Unsupported function. Supported functions: bin.fun = c('mean','sd' and 'mad').")
}
})
vec_av.val2<-unlist(list.fun.val2) #Make vector average val2
#Map Bins average value on 3rd variable to the dataframe list
list.dfs<-lapply(seq_along(list.dfs), function(i){
list.bins<-split(x =list.dfs[[i]],f= list.dfs[[i]]$bin)
list.bins<-Map(cbind,list.bins, bin.av.val2 = list.fun.val2[[i]])
do.call(rbind,list.bins)
})
#Add Sample IDs, Var.grp and Var.col
list.dframes<-Map(cbind,Var1 = Annot.table[[1]], Var.grp = Annot.table[[2]],
Var.col = Annot.table[[3]], list.dfs)
} else { #No bin polygons
#Add Sample IDs, Var.grp and Var.col
list.dframes<-Map(cbind,Var1 = Annot.table[[1]], Var.grp = Annot.table[[2]],
Var.col = Annot.table[[3]],
list_oriented_dens[Annot.table[[1]]])
}
#Make data.frame
dframe<-do.call(rbind,list.dframes)
#Plot
craviola.plot<-ggplot() +
scale_x_continuous(breaks = as.integer(levels(dframe$Var.grp))-1,
labels = levels(data[[2]])) +
xlab(colnames(Annot.table)[2]) + ylab(colnames(data)[4]) +
labs(fill = colnames(Annot.table)[3], color = "Extrema",
alpha = colnames(data)[5]) +
guides(fill = guide_legend(order = 1)) +
scale_fill_manual(values = fill.color, labels = original.var.col)
#Plot Options
if(bins){ #bins TRUE
craviola.plot<-craviola.plot +
geom_polygon(data = dframe, mapping = aes(dens.curv, y.pos,fill = Var.col,
group = interaction(Var1,bin),
alpha = bin.av.val2),
colour = lines.col) +
guides(alpha = guide_legend(order = 2)) +
scale_alpha_continuous(limits=c(floor(min(vec_av.val2)),
ceiling(max(vec_av.val2))),
breaks=round(seq(floor(min(vec_av.val2)),
ceiling(max(vec_av.val2)),
length.out = 5)))
} else { #bins FALSE
craviola.plot<-craviola.plot +
geom_polygon(data = dframe,
mapping = aes(dens.curv, y.pos,fill = Var.col,
group = interaction(Var.col,Var1)),
colour = lines.col)
}
if(boxplots){ #boxplots TRUE
craviola.plot<-craviola.plot +
geom_boxplot(data = box.dframe,
mapping = aes(x=x, ymin = low,lower = low, middle = mid,
upper = top, ymax = top, group = x),
stat = "identity")
}
if(mean.value){ #mean.value TRUE
craviola.plot<-craviola.plot +
geom_point(data = box.dframe,mapping = aes(x = x,y = mean),size=2,
color = "red")
}
craviola.plot
}
ggcraviola(data = dummy.complete)
ggcraviola(data = dummy.complete,bins = T,bin.fun = "sd")
install.packages("RcppParallel")
install.packages(c("rmarkdown", "xfun"))
BiocManager::install()
BiocManager::install()
BiocManager::install()
9*7
(251.6*365)/63
((251.6*365)/63)*0.1555
((251.6*365)/63)*0.1555/10
((251.6*365)/63)*0.1555
((251.6*365)/63)*0.1555/10
library(data.table)
var_corr<-fread("/media/yoann/PAGEAUD Y4/TUBIO/Repeats_Var_Correlations.csv")
var_corr
install.packages(c("backports", "BiocManager", "covr", "curl", "data.table", "digest", "DT", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "igraph", "knitr", "later", "pkgbuild", "promises", "purrr", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "roxygen2", "RSpectra", "rversions", "scales", "shiny", "testthat", "tinytex", "xfun"))
devtools::document()
install.packages("quantmod")
devtools::document()
warnings()
library(BiocompR)
devtools::install()
detach("package:BiocompR", unload = TRUE)
library(BiocompR)
devtools::install()
devtools::document()
devtools::install()
devtools::document()
library(BiocompR)
devtools::document()
devtools::install()
?remove.packages()
remove.packages(pkgs = "BiocompR")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
warnings()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
