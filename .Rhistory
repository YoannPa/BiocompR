colnames(mean.Names)<-paste0("Mean.",colnames(mean.Names))
colnames(sd.Names)<-paste0("SD.",colnames(sd.Names))
colnames(mad.Names)<-paste0("MAD.",colnames(mad.Names))
tbl_meth<-cbind(Matching_HM450_Filenames=colnames(DT_activ)[12:697],mean.Class, mean.Family, mean.Names, sd.Names, mad.Names) #For active repeats
#Merge L1 Data and Table methylation
L1_Meth.Table<-merge(x = L1_Annotated_Data[,c(
"Matching_HM450_Filenames","Tubio_L1_Transposition_Version3"),], y = tbl_meth,
by = "Matching_HM450_Filenames", all.x = TRUE)
#Search for columns having all values to NAs
col.onlyNAs<-apply(
X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2, FUN = all)
# #Search for columns having any NAs and remove them
# colNAs<-apply(X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2,
#               FUN = any)
#Search for columns having a variance (SD) of 0
col.var.zero<-apply(X=L1_Meth.Table, MARGIN=2, FUN=sd, na.rm = TRUE)
col.var.zero<-names(col.var.zero[!(is.na(col.var.zero)) & col.var.zero == 0])
#Convert to numeric
filenames<-L1_Meth.Table$Matching_HM450_Filenames
L1_Meth.Table<-apply(X = L1_Meth.Table, MARGIN = 2, FUN = as.numeric)
L1_Meth.Table<-as.data.table(L1_Meth.Table)
L1_Meth.Table$Matching_HM450_Filenames<-filenames
#Compute Spearman correlation tests of transposition count VS methylation variables
spearman.cor.res<-apply(X = L1_Meth.Table[,-c(
colnames(L1_Meth.Table)[c(1,2)], names(col.onlyNAs[col.onlyNAs==TRUE])),
with=FALSE], MARGIN = 2, FUN = corr.test, y = unlist(L1_Meth.Table[,c(2),]),
method = "spearman", use = "pairwise.complete.obs")
spearman.cor.res[[1]]
typeof(spearman.cor.res[[1]])
test<-spearman.cor.res[[1]]
ls.psych.as.dt<-function(psych.list){
dt<-rbindlist(l = lapply(X = psych.list, FUN = function(i){
data.table(
cor = i[["r"]], pvalue = i[["p"]], nsample = i[["n"]], stderr = i[["se"]])
}), use.names = TRUE, fill = TRUE)
dt<-cbind(var.name = names(psych.list),dt)
return(dt)
}
#Get top correlated and anti-correlated Classes
spearman.cor.res.class<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[1:3]])[order(cor)]
#Adjust p-values for multiple testing using the Holm method
spearman.cor.res.class[, pvalue:=p.adjust(pvalue, method = "holm")]
#Get top correlated and anti-correlated Families
spearman.cor.res.fam<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[4:6]])[order(cor)]
#Adjust p-values for multiple testing using the Holm method
spearman.cor.res.fam[, pvalue:=p.adjust(pvalue, method = "holm")]
#Get top correlated and anti-correlated Names
spearman.cor.res.name<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[7:45]])[order(cor)][!is.na(cor)]
#Adjust p-values for multiple testing using the Holm method
spearman.cor.res.name[, pvalue:=p.adjust(pvalue, method = "holm")]
spearman.cor.res.name
##IMPORTS
setwd("/run/user/1000/gvfs/sftp:host=odcf-worker01/icgc/dkfzlsdf/analysis/G200/pageaud/PhD/Brors_Lab/Pancan_Repeats_Methylation/")
Imports = c("data.table","ggplot2","psych","ggrepel")
lapply(Imports, library, character.only = T)
source("src/core_stat_tests.R")
source("src/ggcorr.R")
##PARAMETERS
active_subfam<-fread("data/Tubio_L1_data/active_subfamilies_PCAWG.tsv")
DT.Full<-readRDS("data/DT_FULL_REPEATS_METH_PANCAN.RDS")
L1_Annotated_Data<-fread("data/Annotations/PCAWG_L1_Retrotransposition/L1_Transposition_Simplified.csv")
##ANALYSIS
#Subset Methylation Matrices with samples matching L1 Transposition
DT.Full<-DT.Full[,c(colnames(DT.Full)[c(1:11)],colnames(DT.Full)[
colnames(DT.Full) %in% L1_Annotated_Data$Matching_HM450_Filenames]),
with=FALSE]
#Get Methylation of Active Repeat Names
active_subfam$subfamily %in% unique(DT.Full$Name) #No methylation for AluYk3
DT_activ<-DT.Full[Name %in% active_subfam$subfamily]
#In Repeats Meth + L1
mean.Rep<-t(DT_activ[, lapply(.SD, mean, na.rm=TRUE), .SDcols=c(12:697)])
sd.Rep<-t(DT_activ[, lapply(.SD, sd, na.rm=TRUE), .SDcols=c(12:697)])
mad.Rep<-t(DT_activ[, lapply(.SD, mad, na.rm=TRUE), .SDcols=c(12:697)])
#By Repeat Classes
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Class), .SDcols=c(12:697)]
mean.Class<-t(res[,-c(1),])
colnames(mean.Class)<-res$Class
#By Repeat Families
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Family), .SDcols=c(12:697)]
mean.Family<-t(res[,-c(1),])
colnames(mean.Family)<-res$Family
#By All Repeat Names
res<-DT_activ[, lapply(.SD, mean, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
mean.Names<-t(res[,-c(1),])
colnames(mean.Names)<-res$Name
#Same but for SD
res<-DT_activ[, lapply(.SD, sd, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
sd.Names<-t(res[,-c(1),])
colnames(sd.Names)<-res$Name
#Same but for MAD
res<-DT_activ[, lapply(.SD, mad, na.rm=TRUE), by=.(Name), .SDcols=c(12:697)]
mad.Names<-t(res[,-c(1),])
colnames(mad.Names)<-res$Name
colnames(mean.Class)<-paste0("Mean.",colnames(mean.Class),".Class")
colnames(mean.Family)<-paste0("Mean.",colnames(mean.Family),".Fam")
colnames(mean.Names)<-paste0("Mean.",colnames(mean.Names))
colnames(sd.Names)<-paste0("SD.",colnames(sd.Names))
colnames(mad.Names)<-paste0("MAD.",colnames(mad.Names))
tbl_meth<-cbind(Matching_HM450_Filenames=colnames(DT_activ)[12:697],mean.Class, mean.Family, mean.Names, sd.Names, mad.Names) #For active repeats
#Merge L1 Data and Table methylation
L1_Meth.Table<-merge(x = L1_Annotated_Data[,c(
"Matching_HM450_Filenames","Tubio_L1_Transposition_Version3"),], y = tbl_meth,
by = "Matching_HM450_Filenames", all.x = TRUE)
#Search for columns having all values to NAs
col.onlyNAs<-apply(
X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2, FUN = all)
# #Search for columns having any NAs and remove them
# colNAs<-apply(X = apply(X=L1_Meth.Table, MARGIN=2, FUN=is.na), MARGIN = 2,
#               FUN = any)
#Search for columns having a variance (SD) of 0
col.var.zero<-apply(X=L1_Meth.Table, MARGIN=2, FUN=sd, na.rm = TRUE)
col.var.zero<-names(col.var.zero[!(is.na(col.var.zero)) & col.var.zero == 0])
#Convert to numeric
filenames<-L1_Meth.Table$Matching_HM450_Filenames
L1_Meth.Table<-apply(X = L1_Meth.Table, MARGIN = 2, FUN = as.numeric)
L1_Meth.Table<-as.data.table(L1_Meth.Table)
L1_Meth.Table$Matching_HM450_Filenames<-filenames
#Compute Spearman correlation tests of transposition count VS methylation variables
spearman.cor.res<-apply(X = L1_Meth.Table[,-c(
colnames(L1_Meth.Table)[c(1,2)], names(col.onlyNAs[col.onlyNAs==TRUE])),
with=FALSE], MARGIN = 2, FUN = corr.test, y = unlist(L1_Meth.Table[,c(2),]),
method = "spearman", use = "pairwise.complete.obs")
spearman.cor.res.class<-ls.psych.as.dt(
psych.list = spearman.cor.res[names(spearman.cor.res) %in%
colnames(L1_Meth.Table)[1:3]])[order(cor)]
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
make_warnings <- function()
{
warning("This is a warning that can be ignored")
warning("This is a warning that shouldn't be ignored")
return(0)
}
make_warnings()
warn.handle <- function(warning, regex="can be ignored"){
condition <- conditionMessage(warning)
if(grepl(pattern = regex, x = condition)) invokeRestart("muffleWarning")
}
withCallingHandlers(expr = make_warnings(), warning = warn.handle)
make_warnings <- function()
{
warning("This is a warning that can be ignored")
# warning("This is a warning that shouldn't be ignored")
# return(0)
}
withCallingHandlers(expr = make_warnings(), warning = warn.handle)
a <- 1:3; a[] <- as.numeric(c("A", "1"))
withCallingHandlers(expr = make_warnings(), warning = warn.handle(regex = "toto"))
warn.handle <- function(warning, regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
make_warnings <- function()
{
warning("This is a warning that can be ignored")
warning("This is a warning that shouldn't be ignored")
# return(0)
}
warn.handle <- function(warning, regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(warning = make_warnings(), regex = "can be ignored")
warn.handle <- function(warning, regex, ...){
withCallingHandlers(expr = regex, warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(warning = make_warnings(), regex = "can be ignored")
make_warnings <- function()
{
warning("This is a warning that can be ignored")
warning("This is a warning that shouldn't be ignored")
# return(0)
}
warning = make_warnings()
regex = "can be ignored"
withCallingHandlers(expr = regex, warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
with_warning_handler <- function(reg, ...)
{
withCallingHandlers(..., warning = function(w)
{
condition <- conditionMessage(w)
if(grepl(reg, condition)) invokeRestart("muffleWarning")
})
}
with_warning_handler(reg = "can be ignored", make_warnings())
with_warning_handler <- function(reg, ...){
withCallingHandlers(..., warning = function(w){
condition <- conditionMessage(w)
if(grepl(reg, condition)){ invokeRestart("muffleWarning")}
})
}
with_warning_handler(reg = "can be ignored", make_warnings())
warn.handle <- function(regex, ...){
withCallingHandlers(expr = regex, warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(warning = make_warnings(), regex = "can be ignored")
warn.handle <- function(regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", make_warnings())
warn.handle <- function(regex, warning, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", warning = make_warnings())
warn.handle <- function(regex, warning, ...){
withCallingHandlers(expr = regex, ..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", warning = make_warnings())
warn.handle <- function(regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", warning = make_warnings())
warn.handle <- function(regex, ...){
withCallingHandlers(..., warning = function(warning){
condition <- conditionMessage(warning)
if(grepl(regex, condition)){ invokeRestart("muffleWarning") }
})
}
warn.handle(regex = "can be ignored", make_warnings())
warn.handle("coercion", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
warn.handle(regex = "can be ignored", make_warnings())
warn.handle(regex = "coercion", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
with_warning_handler <- function(reg, ...)
{
withCallingHandlers(..., warning = function(w)
{
condition <- conditionMessage(w)
if(grepl(reg, condition)) invokeRestart("muffleWarning")
})
}
with_warning_handler("coercion", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
a <- 1:3; a[] <- as.numeric(c("A", "1"))
warn.handle(regex = "conversion automatique ", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
warn.handle(regex = "conversion automatique", {a <- 1:3; a[] <- as.numeric(c("A", "1"))})
?grep
?warning
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
detach("package:BiocompR", unload = TRUE)
library(BiocompR)
detach("package:BiocompR", unload = TRUE)
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
??na.remplace
??na.replace
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
##IMPORTS
setwd("/run/user/1000/gvfs/sftp:host=odcf-worker01/icgc/dkfzlsdf/analysis/G200/pageaud/PhD/Brors_Lab/Pancan_Repeats_Methylation/")
Imports = c("data.table","parallel","ggplot2","BiocompR","ggsci","RColorBrewer")
invisible(lapply(Imports, library, character.only = T))
##PARAMETERS
#Load methylation tables
list_tables<-lapply(X = list.files("data/Repeats_Meth_Tables/",
full.names = TRUE), FUN = fread)
names(list_tables)<-gsub(pattern = ".tsv", replacement = "", x = list.files("data/Repeats_Meth_Tables/"))
#Load L1 Annotated Transposition Data
L1_Annotated_Data<-fread("data/Annotations/PCAWG_L1_Retrotransposition/L1_Transposition_Simplified.csv")
palette.heatmap<-rev(brewer.pal(n = 9,name = "RdBu"))
##ANALYSIS
#Take repeats NAMEs matrices alone
# (Exclude standard deviation because too many missing values !)
#Convert tables as matrices.
# list_matrix<-mclapply(X = list_tables, mc.cores = 7, FUN=as.matrix, rownames=1)
# list_m_var.names<-list_matrix[c(5,15)]
# list_matrix[c(5,10,15)]<-NULL
#Prepare L1 Transposition Annotation
# 'No L1-TR' Vs 'L1-TR'
if(any(is.na(L1_Annotated_Data$Tubio_L1_Transposition_Version3))){
stop("Some transposition data are missing!")
}
L1_Annotated_Data[
Tubio_L1_Transposition_Version3 == 0, 'L1-TR activity':= 'No L1-TR']
L1_Annotated_Data[
Tubio_L1_Transposition_Version3 != 0, 'L1-TR activity':= 'L1-TR']
L1_annot<-merge(x = data.table(colnames(list_tables$AV_Type)[-1]),
y = L1_Annotated_Data[, c(
'Tubio_L1_Transposition_Version3', 'Matching_HM450_Filenames',
'Project_Name', 'Tubio_Histology_Abbreviation', 'Cohort',
'L1-TR activity'),], by.x = "V1", by.y = "Matching_HM450_Filenames",
all.x = TRUE)
L1_annot[is.na(`L1-TR activity`), `L1-TR activity`:='Unknown']
L1_annot[, `L1-TR activity`:=as.factor(`L1-TR activity`)]
#Convert tables as matrices.
list_matrix<-mclapply(X = list_tables, mc.cores = 7, FUN=as.matrix, rownames=1)
#Remove samples for which transposition is unknown in methylation matrices
list_reduced_mat<-mclapply(X = list_matrix, mc.cores = 7, FUN = function(m){
m[,L1_annot[`L1-TR activity`!="Unknown"]$V1]
})
#Idem in annotations
L1_reduced_annot<-L1_annot[`L1-TR activity`!="Unknown"]
L1_reduced_annot[, `L1-TR activity` := factor(`L1-TR activity`)]
#Draw Methylation Heatmap with the reduced L1-transposition annotations
gg2heatmap(m = list_reduced_mat$AV_Mode, na.handle = 'remove',
dist.method = c('manhattan','manhattan'),
dendrograms = TRUE, dend.col.size = 3,
plot.title = "Repeats Methylation in PCAWG Samples",
row.type = 'transposition modes',
ncores = 7, heatmap.pal = palette.heatmap,
rank.fun = NULL, top.rows = NULL,
annot.grps = list(
"L1 activity" = L1_reduced_annot$`L1-TR activity`,
"Cancer Histology"=L1_reduced_annot$Tubio_Histology_Abbreviation),
annot.pal = list(c("#1b9e77", "#d95f02"),
colorRampPalette(pal_npg("nrc",alpha = 0.9)(10))(24)),
axis.text.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y.right = element_blank(), y.axis.right = TRUE,
lgd.scale.name = "Methylation", annot.size = 2, annot.lgd.space = 30,
lgd.pos.y = 0.4, lgd.space.width = 7, lgd.pos.x = 0.9)
devtools::document()
getwd()
setwd("/home/yoann/BiocompR/doc/")
devtools::document()
devtools::document()
devtools::install()
library(ggplot2)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
test<-list(5, 6)
test
c(test,5)
c(test,10)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?mclapply
devtools::document()
devtools::install()
?corrMatOrder
devtools::document()
devtools::install()
?dendro_data
devtools::document()
devtools::install()
?arrangeGrob
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?viewport
devtools::document()
devtools::install()
?grid.arrange
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BiocompR)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
